/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { StrategyCacheService } from '../core/strategyCache';
import { BaseSyncStorageStrategy } from './baseSyncStorage';
import { Inject, NgZone, PLATFORM_ID } from '@angular/core';
import { LOCAL_STORAGE } from '../core/nativeStorage';
import { StorageStrategies } from '../constants/strategy';
import { isPlatformBrowser } from '@angular/common';
var LocalStorageStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(LocalStorageStrategy, _super);
    function LocalStorageStrategy(storage, cache, platformId, zone) {
        var _this = _super.call(this, storage, cache) || this;
        _this.storage = storage;
        _this.cache = cache;
        _this.platformId = platformId;
        _this.zone = zone;
        _this.name = LocalStorageStrategy.strategyName;
        if (isPlatformBrowser(_this.platformId))
            _this.listenExternalChanges();
        return _this;
    }
    /**
     * @return {?}
     */
    LocalStorageStrategy.prototype.listenExternalChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        window.addEventListener('storage', function (event) { return _this.zone.run(function () {
            if (event.storageArea !== _this.storage)
                return;
            /** @type {?} */
            var key = event.key;
            if (key !== null)
                _this.cache.del(_this.name, event.key);
            else
                _this.cache.clear(_this.name);
            _this.keyChanges.next(key);
        }); });
    };
    LocalStorageStrategy.strategyName = StorageStrategies.Local;
    /** @nocollapse */
    LocalStorageStrategy.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [LOCAL_STORAGE,] }] },
        { type: StrategyCacheService },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: NgZone }
    ]; };
    return LocalStorageStrategy;
}(BaseSyncStorageStrategy));
export { LocalStorageStrategy };
if (false) {
    /** @type {?} */
    LocalStorageStrategy.strategyName;
    /** @type {?} */
    LocalStorageStrategy.prototype.name;
    /** @type {?} */
    LocalStorageStrategy.prototype.storage;
    /** @type {?} */
    LocalStorageStrategy.prototype.cache;
    /** @type {?} */
    LocalStorageStrategy.prototype.platformId;
    /** @type {?} */
    LocalStorageStrategy.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9jYWxTdG9yYWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXdlYnN0b3JhZ2UvIiwic291cmNlcyI6WyJsaWIvc3RyYXRlZ2llcy9sb2NhbFN0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUMsdUJBQXVCLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQztBQUMxRCxPQUFPLEVBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxXQUFXLEVBQUMsTUFBTSxlQUFlLENBQUM7QUFDMUQsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3BELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHVCQUF1QixDQUFDO0FBQ3hELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGlCQUFpQixDQUFDO0FBR2xEO0lBQTBDLGdEQUF1QjtJQUloRSw4QkFBNkMsT0FBbUIsRUFDMUMsS0FBMkIsRUFDTixVQUFlLEVBQ3BDLElBQVk7UUFIbEMsWUFJQyxrQkFBTSxPQUFPLEVBQUUsS0FBSyxDQUFDLFNBRXJCO1FBTjRDLGFBQU8sR0FBUCxPQUFPLENBQVk7UUFDMUMsV0FBSyxHQUFMLEtBQUssQ0FBc0I7UUFDTixnQkFBVSxHQUFWLFVBQVUsQ0FBSztRQUNwQyxVQUFJLEdBQUosSUFBSSxDQUFRO1FBTHpCLFVBQUksR0FBVyxvQkFBb0IsQ0FBQyxZQUFZLENBQUM7UUFPekQsSUFBSSxpQkFBaUIsQ0FBQyxLQUFJLENBQUMsVUFBVSxDQUFDO1lBQUUsS0FBSSxDQUFDLHFCQUFxQixFQUFFLENBQUM7O0lBQ3RFLENBQUM7Ozs7SUFFUyxvREFBcUI7OztJQUEvQjtRQUFBLGlCQVFDO1FBUEEsTUFBTSxDQUFDLGdCQUFnQixDQUFDLFNBQVMsRUFBRSxVQUFDLEtBQW1CLElBQUssT0FBQSxLQUFJLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQztZQUN6RSxJQUFJLEtBQUssQ0FBQyxXQUFXLEtBQUssS0FBSSxDQUFDLE9BQU87Z0JBQUUsT0FBTzs7Z0JBQ3pDLEdBQUcsR0FBVyxLQUFLLENBQUMsR0FBRztZQUM3QixJQUFJLEdBQUcsS0FBSyxJQUFJO2dCQUFFLEtBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLEtBQUksQ0FBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDOztnQkFDbEQsS0FBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsS0FBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ2pDLEtBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzNCLENBQUMsQ0FBQyxFQU4wRCxDQU0xRCxDQUFDLENBQUM7SUFDTCxDQUFDO0lBbkJlLGlDQUFZLEdBQVcsaUJBQWlCLENBQUMsS0FBSyxDQUFDOzs7Z0RBR2xELE1BQU0sU0FBQyxhQUFhO2dCQVoxQixvQkFBb0I7Z0RBY2QsTUFBTSxTQUFDLFdBQVc7Z0JBWmhCLE1BQU07O0lBNEJ0QiwyQkFBQztDQUFBLEFBdEJELENBQTBDLHVCQUF1QixHQXNCaEU7U0F0Qlksb0JBQW9COzs7SUFDaEMsa0NBQStEOztJQUMvRCxvQ0FBMEQ7O0lBRTlDLHVDQUFvRDs7SUFDcEQscUNBQXFDOztJQUNyQywwQ0FBOEM7O0lBQzlDLG9DQUFzQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RyYXRlZ3lDYWNoZVNlcnZpY2V9IGZyb20gJy4uL2NvcmUvc3RyYXRlZ3lDYWNoZSc7XHJcbmltcG9ydCB7QmFzZVN5bmNTdG9yYWdlU3RyYXRlZ3l9IGZyb20gJy4vYmFzZVN5bmNTdG9yYWdlJztcclxuaW1wb3J0IHtJbmplY3QsIE5nWm9uZSwgUExBVEZPUk1fSUR9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge0xPQ0FMX1NUT1JBR0V9IGZyb20gJy4uL2NvcmUvbmF0aXZlU3RvcmFnZSc7XHJcbmltcG9ydCB7U3RvcmFnZVN0cmF0ZWdpZXN9IGZyb20gJy4uL2NvbnN0YW50cy9zdHJhdGVneSc7XHJcbmltcG9ydCB7aXNQbGF0Zm9ybUJyb3dzZXJ9IGZyb20gJ0Bhbmd1bGFyL2NvbW1vbic7XHJcbmltcG9ydCB7V2ViU3RvcmFnZX0gZnJvbSAnLi4vY29yZS9pbnRlcmZhY2VzL3dlYlN0b3JhZ2UnO1xyXG5cclxuZXhwb3J0IGNsYXNzIExvY2FsU3RvcmFnZVN0cmF0ZWd5IGV4dGVuZHMgQmFzZVN5bmNTdG9yYWdlU3RyYXRlZ3kge1xyXG5cdHN0YXRpYyByZWFkb25seSBzdHJhdGVneU5hbWU6IHN0cmluZyA9IFN0b3JhZ2VTdHJhdGVnaWVzLkxvY2FsO1xyXG5cdHJlYWRvbmx5IG5hbWU6IHN0cmluZyA9IExvY2FsU3RvcmFnZVN0cmF0ZWd5LnN0cmF0ZWd5TmFtZTtcclxuXHJcblx0Y29uc3RydWN0b3IoQEluamVjdChMT0NBTF9TVE9SQUdFKSBwcm90ZWN0ZWQgc3RvcmFnZTogV2ViU3RvcmFnZSxcclxuXHQgICAgICAgICAgICBwcm90ZWN0ZWQgY2FjaGU6IFN0cmF0ZWd5Q2FjaGVTZXJ2aWNlLFxyXG5cdCAgICAgICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByb3RlY3RlZCBwbGF0Zm9ybUlkOiBhbnksXHJcblx0ICAgICAgICAgICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZSkge1xyXG5cdFx0c3VwZXIoc3RvcmFnZSwgY2FjaGUpO1xyXG5cdFx0aWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHRoaXMubGlzdGVuRXh0ZXJuYWxDaGFuZ2VzKCk7XHJcblx0fVxyXG5cclxuXHRwcm90ZWN0ZWQgbGlzdGVuRXh0ZXJuYWxDaGFuZ2VzKCkge1xyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3N0b3JhZ2UnLCAoZXZlbnQ6IFN0b3JhZ2VFdmVudCkgPT4gdGhpcy56b25lLnJ1bigoKSA9PiB7XHJcblx0XHRcdGlmIChldmVudC5zdG9yYWdlQXJlYSAhPT0gdGhpcy5zdG9yYWdlKSByZXR1cm47XHJcblx0XHRcdGNvbnN0IGtleTogc3RyaW5nID0gZXZlbnQua2V5O1xyXG5cdFx0XHRpZiAoa2V5ICE9PSBudWxsKSB0aGlzLmNhY2hlLmRlbCh0aGlzLm5hbWUsIGV2ZW50LmtleSk7XHJcblx0XHRcdGVsc2UgdGhpcy5jYWNoZS5jbGVhcih0aGlzLm5hbWUpO1xyXG5cdFx0XHR0aGlzLmtleUNoYW5nZXMubmV4dChrZXkpO1xyXG5cdFx0fSkpO1xyXG5cdH1cclxuXHJcbn1cclxuIl19