/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { StorageKeyManager } from '../../helpers/storageKeyManager';
import { distinctUntilChanged, filter, map, shareReplay, switchMap } from 'rxjs/operators';
var AsyncStorage = /** @class */ (function () {
    function AsyncStorage(strategy) {
        this.strategy = strategy;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    AsyncStorage.prototype.retrieve = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return this.strategy.get(StorageKeyManager.normalize(key)).pipe(map(function (value) { return typeof value === 'undefined' ? null : value; }));
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    AsyncStorage.prototype.store = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        return this.strategy.set(StorageKeyManager.normalize(key), value);
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    AsyncStorage.prototype.clear = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        return key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();
    };
    /**
     * @return {?}
     */
    AsyncStorage.prototype.getStrategyName = /**
     * @return {?}
     */
    function () { return this.strategy.name; };
    /**
     * @param {?} key
     * @return {?}
     */
    AsyncStorage.prototype.observe = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        key = StorageKeyManager.normalize(key);
        return this.strategy.keyChanges.pipe(filter(function (changed) { return changed === null || changed === key; }), switchMap(function () { return _this.strategy.get(key); }), distinctUntilChanged(), shareReplay());
    };
    return AsyncStorage;
}());
export { AsyncStorage };
if (false) {
    /** @type {?} */
    AsyncStorage.prototype.strategy;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXN5bmNTdG9yYWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXdlYnN0b3JhZ2UvIiwic291cmNlcyI6WyJsaWIvY29yZS90ZW1wbGF0ZXMvYXN5bmNTdG9yYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFHQSxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQ0FBaUMsQ0FBQztBQUNsRSxPQUFPLEVBQUMsb0JBQW9CLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsU0FBUyxFQUFDLE1BQU0sZ0JBQWdCLENBQUM7QUFFekY7SUFFQyxzQkFBc0IsUUFBOEI7UUFBOUIsYUFBUSxHQUFSLFFBQVEsQ0FBc0I7SUFDcEQsQ0FBQzs7Ozs7SUFFRCwrQkFBUTs7OztJQUFSLFVBQVMsR0FBVztRQUNuQixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FDOUQsR0FBRyxDQUFDLFVBQUMsS0FBVSxJQUFLLE9BQUEsT0FBTyxLQUFLLEtBQUssV0FBVyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEtBQUssRUFBM0MsQ0FBMkMsQ0FBQyxDQUNoRSxDQUFDO0lBQ0gsQ0FBQzs7Ozs7O0lBRUQsNEJBQUs7Ozs7O0lBQUwsVUFBTSxHQUFXLEVBQUUsS0FBVTtRQUM1QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQztJQUNuRSxDQUFDOzs7OztJQUVELDRCQUFLOzs7O0lBQUwsVUFBTSxHQUFZO1FBQ2pCLE9BQU8sR0FBRyxLQUFLLFNBQVMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxRQUFRLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEcsQ0FBQzs7OztJQUVELHNDQUFlOzs7SUFBZixjQUE0QixPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQzs7Ozs7SUFFeEQsOEJBQU87Ozs7SUFBUCxVQUFRLEdBQVc7UUFBbkIsaUJBUUM7UUFQQSxHQUFHLEdBQUcsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQ3ZDLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUNuQyxNQUFNLENBQUMsVUFBQyxPQUFlLElBQUssT0FBQSxPQUFPLEtBQUssSUFBSSxJQUFJLE9BQU8sS0FBSyxHQUFHLEVBQW5DLENBQW1DLENBQUMsRUFDaEUsU0FBUyxDQUFDLGNBQU0sT0FBQSxLQUFJLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsRUFBdEIsQ0FBc0IsQ0FBQyxFQUN2QyxvQkFBb0IsRUFBRSxFQUN0QixXQUFXLEVBQUUsQ0FDYixDQUFDO0lBQ0gsQ0FBQztJQUNGLG1CQUFDO0FBQUQsQ0FBQyxBQTlCRCxJQThCQzs7OztJQTVCWSxnQ0FBd0MiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0b3JhZ2VTdHJhdGVneX0gZnJvbSAnLi4vaW50ZXJmYWNlcy9zdG9yYWdlU3RyYXRlZ3knO1xyXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge1N0b3JhZ2VTZXJ2aWNlfSBmcm9tICcuLi9pbnRlcmZhY2VzL3N0b3JhZ2VTZXJ2aWNlJztcclxuaW1wb3J0IHtTdG9yYWdlS2V5TWFuYWdlcn0gZnJvbSAnLi4vLi4vaGVscGVycy9zdG9yYWdlS2V5TWFuYWdlcic7XHJcbmltcG9ydCB7ZGlzdGluY3RVbnRpbENoYW5nZWQsIGZpbHRlciwgbWFwLCBzaGFyZVJlcGxheSwgc3dpdGNoTWFwfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XHJcblxyXG5leHBvcnQgY2xhc3MgQXN5bmNTdG9yYWdlIGltcGxlbWVudHMgU3RvcmFnZVNlcnZpY2Uge1xyXG5cclxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc3RyYXRlZ3k6IFN0b3JhZ2VTdHJhdGVneTxhbnk+KSB7XHJcblx0fVxyXG5cclxuXHRyZXRyaWV2ZShrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcblx0XHRyZXR1cm4gdGhpcy5zdHJhdGVneS5nZXQoU3RvcmFnZUtleU1hbmFnZXIubm9ybWFsaXplKGtleSkpLnBpcGUoXHJcblx0XHRcdG1hcCgodmFsdWU6IGFueSkgPT4gdHlwZW9mIHZhbHVlID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiB2YWx1ZSlcclxuXHRcdCk7XHJcblx0fVxyXG5cclxuXHRzdG9yZShrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcblx0XHRyZXR1cm4gdGhpcy5zdHJhdGVneS5zZXQoU3RvcmFnZUtleU1hbmFnZXIubm9ybWFsaXplKGtleSksIHZhbHVlKTtcclxuXHR9XHJcblxyXG5cdGNsZWFyKGtleT86IHN0cmluZyk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG5cdFx0cmV0dXJuIGtleSAhPT0gdW5kZWZpbmVkID8gdGhpcy5zdHJhdGVneS5kZWwoU3RvcmFnZUtleU1hbmFnZXIubm9ybWFsaXplKGtleSkpIDogdGhpcy5zdHJhdGVneS5jbGVhcigpO1xyXG5cdH1cclxuXHJcblx0Z2V0U3RyYXRlZ3lOYW1lKCk6IHN0cmluZyB7IHJldHVybiB0aGlzLnN0cmF0ZWd5Lm5hbWU7IH1cclxuXHJcblx0b2JzZXJ2ZShrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcblx0XHRrZXkgPSBTdG9yYWdlS2V5TWFuYWdlci5ub3JtYWxpemUoa2V5KTtcclxuXHRcdHJldHVybiB0aGlzLnN0cmF0ZWd5LmtleUNoYW5nZXMucGlwZShcclxuXHRcdFx0ZmlsdGVyKChjaGFuZ2VkOiBzdHJpbmcpID0+IGNoYW5nZWQgPT09IG51bGwgfHwgY2hhbmdlZCA9PT0ga2V5KSxcclxuXHRcdFx0c3dpdGNoTWFwKCgpID0+IHRoaXMuc3RyYXRlZ3kuZ2V0KGtleSkpLFxyXG5cdFx0XHRkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxyXG5cdFx0XHRzaGFyZVJlcGxheSgpXHJcblx0XHQpO1xyXG5cdH1cclxufVxyXG4iXX0=