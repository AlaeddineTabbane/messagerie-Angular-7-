/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { StrategyCacheService } from '../core/strategyCache';
import { BaseSyncStorageStrategy } from './baseSyncStorage';
import { Inject, NgZone, PLATFORM_ID } from '@angular/core';
import { SESSION_STORAGE } from '../core/nativeStorage';
import { StorageStrategies } from '../constants/strategy';
import { isPlatformBrowser } from '@angular/common';
var SessionStorageStrategy = /** @class */ (function (_super) {
    tslib_1.__extends(SessionStorageStrategy, _super);
    function SessionStorageStrategy(storage, cache, platformId, zone) {
        var _this = _super.call(this, storage, cache) || this;
        _this.storage = storage;
        _this.cache = cache;
        _this.platformId = platformId;
        _this.zone = zone;
        _this.name = SessionStorageStrategy.strategyName;
        if (isPlatformBrowser(_this.platformId))
            _this.listenExternalChanges();
        return _this;
    }
    /**
     * @return {?}
     */
    SessionStorageStrategy.prototype.listenExternalChanges = /**
     * @return {?}
     */
    function () {
        var _this = this;
        window.addEventListener('storage', function (event) { return _this.zone.run(function () {
            if (event.storageArea !== _this.storage)
                return;
            /** @type {?} */
            var key = event.key;
            if (event.key !== null)
                _this.cache.del(_this.name, event.key);
            else
                _this.cache.clear(_this.name);
            _this.keyChanges.next(key);
        }); });
    };
    SessionStorageStrategy.strategyName = StorageStrategies.Session;
    /** @nocollapse */
    SessionStorageStrategy.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [SESSION_STORAGE,] }] },
        { type: StrategyCacheService },
        { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
        { type: NgZone }
    ]; };
    return SessionStorageStrategy;
}(BaseSyncStorageStrategy));
export { SessionStorageStrategy };
if (false) {
    /** @type {?} */
    SessionStorageStrategy.strategyName;
    /** @type {?} */
    SessionStorageStrategy.prototype.name;
    /** @type {?} */
    SessionStorageStrategy.prototype.storage;
    /** @type {?} */
    SessionStorageStrategy.prototype.cache;
    /** @type {?} */
    SessionStorageStrategy.prototype.platformId;
    /** @type {?} */
    SessionStorageStrategy.prototype.zone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2Vzc2lvblN0b3JhZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtd2Vic3RvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9zdHJhdGVnaWVzL3Nlc3Npb25TdG9yYWdlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFDLG9CQUFvQixFQUFDLE1BQU0sdUJBQXVCLENBQUM7QUFDM0QsT0FBTyxFQUFDLHVCQUF1QixFQUFDLE1BQU0sbUJBQW1CLENBQUM7QUFDMUQsT0FBTyxFQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzFELE9BQU8sRUFBQyxlQUFlLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN0RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSxpQkFBaUIsQ0FBQztBQUdsRDtJQUE0QyxrREFBdUI7SUFJbEUsZ0NBQStDLE9BQW1CLEVBQzVDLEtBQTJCLEVBQ04sVUFBZSxFQUNwQyxJQUFZO1FBSGxDLFlBSUMsa0JBQU0sT0FBTyxFQUFFLEtBQUssQ0FBQyxTQUVyQjtRQU44QyxhQUFPLEdBQVAsT0FBTyxDQUFZO1FBQzVDLFdBQUssR0FBTCxLQUFLLENBQXNCO1FBQ04sZ0JBQVUsR0FBVixVQUFVLENBQUs7UUFDcEMsVUFBSSxHQUFKLElBQUksQ0FBUTtRQUx6QixVQUFJLEdBQVcsc0JBQXNCLENBQUMsWUFBWSxDQUFDO1FBTzNELElBQUksaUJBQWlCLENBQUMsS0FBSSxDQUFDLFVBQVUsQ0FBQztZQUFFLEtBQUksQ0FBQyxxQkFBcUIsRUFBRSxDQUFDOztJQUN0RSxDQUFDOzs7O0lBRVMsc0RBQXFCOzs7SUFBL0I7UUFBQSxpQkFRQztRQVBBLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxTQUFTLEVBQUUsVUFBQyxLQUFtQixJQUFLLE9BQUEsS0FBSSxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUM7WUFDekUsSUFBSSxLQUFLLENBQUMsV0FBVyxLQUFLLEtBQUksQ0FBQyxPQUFPO2dCQUFFLE9BQU87O2dCQUN6QyxHQUFHLEdBQVcsS0FBSyxDQUFDLEdBQUc7WUFDN0IsSUFBSSxLQUFLLENBQUMsR0FBRyxLQUFLLElBQUk7Z0JBQUUsS0FBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsS0FBSSxDQUFDLElBQUksRUFBRSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7O2dCQUN4RCxLQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxLQUFJLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDakMsS0FBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDM0IsQ0FBQyxDQUFDLEVBTjBELENBTTFELENBQUMsQ0FBQztJQUNMLENBQUM7SUFuQmUsbUNBQVksR0FBVyxpQkFBaUIsQ0FBQyxPQUFPLENBQUM7OztnREFHcEQsTUFBTSxTQUFDLGVBQWU7Z0JBWjVCLG9CQUFvQjtnREFjZCxNQUFNLFNBQUMsV0FBVztnQkFaaEIsTUFBTTs7SUE0QnRCLDZCQUFDO0NBQUEsQUF0QkQsQ0FBNEMsdUJBQXVCLEdBc0JsRTtTQXRCWSxzQkFBc0I7OztJQUNsQyxvQ0FBaUU7O0lBQ2pFLHNDQUE0RDs7SUFFaEQseUNBQXNEOztJQUN0RCx1Q0FBcUM7O0lBQ3JDLDRDQUE4Qzs7SUFDOUMsc0NBQXNCIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdHJhdGVneUNhY2hlU2VydmljZX0gZnJvbSAnLi4vY29yZS9zdHJhdGVneUNhY2hlJztcclxuaW1wb3J0IHtCYXNlU3luY1N0b3JhZ2VTdHJhdGVneX0gZnJvbSAnLi9iYXNlU3luY1N0b3JhZ2UnO1xyXG5pbXBvcnQge0luamVjdCwgTmdab25lLCBQTEFURk9STV9JRH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcbmltcG9ydCB7U0VTU0lPTl9TVE9SQUdFfSBmcm9tICcuLi9jb3JlL25hdGl2ZVN0b3JhZ2UnO1xyXG5pbXBvcnQge1N0b3JhZ2VTdHJhdGVnaWVzfSBmcm9tICcuLi9jb25zdGFudHMvc3RyYXRlZ3knO1xyXG5pbXBvcnQge2lzUGxhdGZvcm1Ccm93c2VyfSBmcm9tICdAYW5ndWxhci9jb21tb24nO1xyXG5pbXBvcnQge1dlYlN0b3JhZ2V9IGZyb20gJy4uL2NvcmUvaW50ZXJmYWNlcy93ZWJTdG9yYWdlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTZXNzaW9uU3RvcmFnZVN0cmF0ZWd5IGV4dGVuZHMgQmFzZVN5bmNTdG9yYWdlU3RyYXRlZ3kge1xyXG5cdHN0YXRpYyByZWFkb25seSBzdHJhdGVneU5hbWU6IHN0cmluZyA9IFN0b3JhZ2VTdHJhdGVnaWVzLlNlc3Npb247XHJcblx0cmVhZG9ubHkgbmFtZTogc3RyaW5nID0gU2Vzc2lvblN0b3JhZ2VTdHJhdGVneS5zdHJhdGVneU5hbWU7XHJcblxyXG5cdGNvbnN0cnVjdG9yKEBJbmplY3QoU0VTU0lPTl9TVE9SQUdFKSBwcm90ZWN0ZWQgc3RvcmFnZTogV2ViU3RvcmFnZSxcclxuXHQgICAgICAgICAgICBwcm90ZWN0ZWQgY2FjaGU6IFN0cmF0ZWd5Q2FjaGVTZXJ2aWNlLFxyXG5cdCAgICAgICAgICAgIEBJbmplY3QoUExBVEZPUk1fSUQpIHByb3RlY3RlZCBwbGF0Zm9ybUlkOiBhbnksXHJcblx0ICAgICAgICAgICAgcHJvdGVjdGVkIHpvbmU6IE5nWm9uZSkge1xyXG5cdFx0c3VwZXIoc3RvcmFnZSwgY2FjaGUpO1xyXG5cdFx0aWYgKGlzUGxhdGZvcm1Ccm93c2VyKHRoaXMucGxhdGZvcm1JZCkpIHRoaXMubGlzdGVuRXh0ZXJuYWxDaGFuZ2VzKCk7XHJcblx0fVxyXG5cclxuXHRwcm90ZWN0ZWQgbGlzdGVuRXh0ZXJuYWxDaGFuZ2VzKCkge1xyXG5cdFx0d2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3N0b3JhZ2UnLCAoZXZlbnQ6IFN0b3JhZ2VFdmVudCkgPT4gdGhpcy56b25lLnJ1bigoKSA9PiB7XHJcblx0XHRcdGlmIChldmVudC5zdG9yYWdlQXJlYSAhPT0gdGhpcy5zdG9yYWdlKSByZXR1cm47XHJcblx0XHRcdGNvbnN0IGtleTogc3RyaW5nID0gZXZlbnQua2V5O1xyXG5cdFx0XHRpZiAoZXZlbnQua2V5ICE9PSBudWxsKSB0aGlzLmNhY2hlLmRlbCh0aGlzLm5hbWUsIGV2ZW50LmtleSk7XHJcblx0XHRcdGVsc2UgdGhpcy5jYWNoZS5jbGVhcih0aGlzLm5hbWUpO1xyXG5cdFx0XHR0aGlzLmtleUNoYW5nZXMubmV4dChrZXkpO1xyXG5cdFx0fSkpO1xyXG5cdH1cclxuXHJcbn1cclxuIl19