/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { StrategyIndex } from '../services/strategyIndex';
import { StorageKeyManager } from './storageKeyManager';
import { noop } from './noop';
var DecoratorBuilder = /** @class */ (function () {
    function DecoratorBuilder() {
    }
    /**
     * @param {?} strategyName
     * @param {?} prototype
     * @param {?} propName
     * @param {?=} key
     * @param {?=} defaultValue
     * @return {?}
     */
    DecoratorBuilder.buildSyncStrategyDecorator = /**
     * @param {?} strategyName
     * @param {?} prototype
     * @param {?} propName
     * @param {?=} key
     * @param {?=} defaultValue
     * @return {?}
     */
    function (strategyName, prototype, propName, key, defaultValue) {
        if (defaultValue === void 0) { defaultValue = null; }
        /** @type {?} */
        var rawKey = key || propName;
        /** @type {?} */
        var storageKey;
        Object.defineProperty(prototype, propName, {
            get: function () {
                /** @type {?} */
                var value;
                StrategyIndex.get(strategyName).get(getKey()).subscribe(function (result) { return value = result; });
                return value === undefined ? defaultValue : value;
            },
            set: function (value) {
                StrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);
            }
        });
        /**
         * @return {?}
         */
        function getKey() {
            if (storageKey !== undefined)
                return storageKey;
            return storageKey = StorageKeyManager.normalize(rawKey);
        }
    };
    return DecoratorBuilder;
}());
export { DecoratorBuilder };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVjb3JhdG9yQnVpbGRlci5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC13ZWJzdG9yYWdlLyIsInNvdXJjZXMiOlsibGliL2hlbHBlcnMvZGVjb3JhdG9yQnVpbGRlci50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLGFBQWEsRUFBQyxNQUFNLDJCQUEyQixDQUFDO0FBRXhELE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLHFCQUFxQixDQUFDO0FBQ3RELE9BQU8sRUFBQyxJQUFJLEVBQUMsTUFBTSxRQUFRLENBQUM7QUFFNUI7SUFBQTtJQXNCQSxDQUFDOzs7Ozs7Ozs7SUFwQk8sMkNBQTBCOzs7Ozs7OztJQUFqQyxVQUFrQyxZQUF3QyxFQUFFLFNBQVMsRUFBRSxRQUFnQixFQUFFLEdBQVksRUFBRSxZQUF3QjtRQUF4Qiw2QkFBQSxFQUFBLG1CQUF3Qjs7WUFDeEksTUFBTSxHQUFXLEdBQUcsSUFBSSxRQUFROztZQUNsQyxVQUFrQjtRQUV0QixNQUFNLENBQUMsY0FBYyxDQUFDLFNBQVMsRUFBRSxRQUFRLEVBQUU7WUFDMUMsR0FBRyxFQUFFOztvQkFDQSxLQUFVO2dCQUNkLGFBQWEsQ0FBQyxHQUFHLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLE1BQU0sRUFBRSxDQUFDLENBQUMsU0FBUyxDQUFDLFVBQUMsTUFBTSxJQUFLLE9BQUEsS0FBSyxHQUFHLE1BQU0sRUFBZCxDQUFjLENBQUMsQ0FBQztnQkFDcEYsT0FBTyxLQUFLLEtBQUssU0FBUyxDQUFDLENBQUMsQ0FBQyxZQUFZLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQztZQUNuRCxDQUFDO1lBQ0QsR0FBRyxFQUFFLFVBQVMsS0FBSztnQkFDbEIsYUFBYSxDQUFDLEdBQUcsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsTUFBTSxFQUFFLEVBQUUsS0FBSyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQ3RFLENBQUM7U0FDRCxDQUFDLENBQUM7Ozs7UUFFSCxTQUFTLE1BQU07WUFDZCxJQUFJLFVBQVUsS0FBSyxTQUFTO2dCQUFFLE9BQU8sVUFBVSxDQUFDO1lBQ2hELE9BQU8sVUFBVSxHQUFHLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN6RCxDQUFDO0lBQ0YsQ0FBQztJQUNGLHVCQUFDO0FBQUQsQ0FBQyxBQXRCRCxJQXNCQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RyYXRlZ3lJbmRleH0gZnJvbSAnLi4vc2VydmljZXMvc3RyYXRlZ3lJbmRleCc7XHJcbmltcG9ydCB7U3RvcmFnZVN0cmF0ZWdpZXN9IGZyb20gJy4uL2NvbnN0YW50cy9zdHJhdGVneSc7XHJcbmltcG9ydCB7U3RvcmFnZUtleU1hbmFnZXJ9IGZyb20gJy4vc3RvcmFnZUtleU1hbmFnZXInO1xyXG5pbXBvcnQge25vb3B9IGZyb20gJy4vbm9vcCc7XHJcblxyXG5leHBvcnQgY2xhc3MgRGVjb3JhdG9yQnVpbGRlciB7XHJcblx0XHJcblx0c3RhdGljIGJ1aWxkU3luY1N0cmF0ZWd5RGVjb3JhdG9yKHN0cmF0ZWd5TmFtZTogc3RyaW5nIHwgU3RvcmFnZVN0cmF0ZWdpZXMsIHByb3RvdHlwZSwgcHJvcE5hbWU6IHN0cmluZywga2V5Pzogc3RyaW5nLCBkZWZhdWx0VmFsdWU6IGFueSA9IG51bGwpIHtcclxuXHRcdGNvbnN0IHJhd0tleTogc3RyaW5nID0ga2V5IHx8IHByb3BOYW1lO1xyXG5cdFx0bGV0IHN0b3JhZ2VLZXk6IHN0cmluZztcclxuXHRcdFxyXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHByb3RvdHlwZSwgcHJvcE5hbWUsIHtcclxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcclxuXHRcdFx0XHRsZXQgdmFsdWU6IGFueTtcclxuXHRcdFx0XHRTdHJhdGVneUluZGV4LmdldChzdHJhdGVneU5hbWUpLmdldChnZXRLZXkoKSkuc3Vic2NyaWJlKChyZXN1bHQpID0+IHZhbHVlID0gcmVzdWx0KTtcclxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/IGRlZmF1bHRWYWx1ZSA6IHZhbHVlO1xyXG5cdFx0XHR9LFxyXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKHZhbHVlKSB7XHJcblx0XHRcdFx0U3RyYXRlZ3lJbmRleC5nZXQoc3RyYXRlZ3lOYW1lKS5zZXQoZ2V0S2V5KCksIHZhbHVlKS5zdWJzY3JpYmUobm9vcCk7XHJcblx0XHRcdH1cclxuXHRcdH0pO1xyXG5cdFx0XHJcblx0XHRmdW5jdGlvbiBnZXRLZXkoKSB7XHJcblx0XHRcdGlmIChzdG9yYWdlS2V5ICE9PSB1bmRlZmluZWQpIHJldHVybiBzdG9yYWdlS2V5O1xyXG5cdFx0XHRyZXR1cm4gc3RvcmFnZUtleSA9IFN0b3JhZ2VLZXlNYW5hZ2VyLm5vcm1hbGl6ZShyYXdLZXkpO1xyXG5cdFx0fVxyXG5cdH1cclxufVxyXG5cclxuIl19