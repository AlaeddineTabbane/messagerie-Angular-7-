/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { of, Subject } from 'rxjs';
import { StrategyCacheService } from '../core/strategyCache';
import { StorageStrategies } from '../constants/strategy';
import { Inject } from '@angular/core';
export class InMemoryStorageStrategy {
    /**
     * @param {?} cache
     */
    constructor(cache) {
        this.cache = cache;
        this.keyChanges = new Subject();
        this.isAvailable = true;
        this.name = InMemoryStorageStrategy.strategyName;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    get(key) {
        return of(this.cache.get(this.name, key));
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    set(key, value) {
        this.cache.set(this.name, key, value);
        this.keyChanges.next(key);
        return of(value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    del(key) {
        this.cache.del(this.name, key);
        this.keyChanges.next(key);
        return of(null);
    }
    /**
     * @return {?}
     */
    clear() {
        this.cache.clear(this.name);
        this.keyChanges.next(null);
        return of(null);
    }
}
InMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;
/** @nocollapse */
InMemoryStorageStrategy.ctorParameters = () => [
    { type: StrategyCacheService, decorators: [{ type: Inject, args: [StrategyCacheService,] }] }
];
if (false) {
    /** @type {?} */
    InMemoryStorageStrategy.strategyName;
    /** @type {?} */
    InMemoryStorageStrategy.prototype.keyChanges;
    /** @type {?} */
    InMemoryStorageStrategy.prototype.isAvailable;
    /** @type {?} */
    InMemoryStorageStrategy.prototype.name;
    /** @type {?} */
    InMemoryStorageStrategy.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5NZW1vcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtd2Vic3RvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9zdHJhdGVnaWVzL2luTWVtb3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQWEsRUFBRSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXJDLE1BQU0sT0FBTyx1QkFBdUI7Ozs7SUFNbkMsWUFBb0QsS0FBMkI7UUFBM0IsVUFBSyxHQUFMLEtBQUssQ0FBc0I7UUFKdEUsZUFBVSxHQUFvQixJQUFJLE9BQU8sRUFBRSxDQUFDO1FBQ3JELGdCQUFXLEdBQVksSUFBSSxDQUFDO1FBQ25CLFNBQUksR0FBVyx1QkFBdUIsQ0FBQyxZQUFZLENBQUM7SUFFcUIsQ0FBQzs7Ozs7SUFFbkYsR0FBRyxDQUFDLEdBQVc7UUFDZCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDLENBQUM7SUFDM0MsQ0FBQzs7Ozs7O0lBRUQsR0FBRyxDQUFDLEdBQVcsRUFBRSxLQUFVO1FBQzFCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBQ3RDLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLE9BQU8sRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xCLENBQUM7Ozs7O0lBRUQsR0FBRyxDQUFDLEdBQVc7UUFDZCxJQUFJLENBQUMsS0FBSyxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQy9CLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzFCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Ozs7SUFFRCxLQUFLO1FBQ0osSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLENBQUM7O0FBM0JlLG9DQUFZLEdBQVcsaUJBQWlCLENBQUMsUUFBUSxDQUFDOzs7WUFMM0Qsb0JBQW9CLHVCQVVkLE1BQU0sU0FBQyxvQkFBb0I7Ozs7SUFMeEMscUNBQWtFOztJQUNsRSw2Q0FBcUQ7O0lBQ3JELDhDQUE0Qjs7SUFDNUIsdUNBQTZEOztJQUVqRCx3Q0FBbUUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge1N0b3JhZ2VTdHJhdGVneX0gZnJvbSAnLi4vY29yZS9pbnRlcmZhY2VzL3N0b3JhZ2VTdHJhdGVneSc7XHJcbmltcG9ydCB7T2JzZXJ2YWJsZSwgb2YsIFN1YmplY3R9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge1N0cmF0ZWd5Q2FjaGVTZXJ2aWNlfSBmcm9tICcuLi9jb3JlL3N0cmF0ZWd5Q2FjaGUnO1xyXG5pbXBvcnQge1N0b3JhZ2VTdHJhdGVnaWVzfSBmcm9tICcuLi9jb25zdGFudHMvc3RyYXRlZ3knO1xyXG5pbXBvcnQge0luamVjdH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XHJcblxyXG5leHBvcnQgY2xhc3MgSW5NZW1vcnlTdG9yYWdlU3RyYXRlZ3kgaW1wbGVtZW50cyBTdG9yYWdlU3RyYXRlZ3k8YW55PiB7XHJcblx0c3RhdGljIHJlYWRvbmx5IHN0cmF0ZWd5TmFtZTogc3RyaW5nID0gU3RvcmFnZVN0cmF0ZWdpZXMuSW5NZW1vcnk7XHJcblx0cmVhZG9ubHkga2V5Q2hhbmdlczogU3ViamVjdDxzdHJpbmc+ID0gbmV3IFN1YmplY3QoKTtcclxuXHRpc0F2YWlsYWJsZTogYm9vbGVhbiA9IHRydWU7XHJcblx0cmVhZG9ubHkgbmFtZTogc3RyaW5nID0gSW5NZW1vcnlTdG9yYWdlU3RyYXRlZ3kuc3RyYXRlZ3lOYW1lO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihASW5qZWN0KFN0cmF0ZWd5Q2FjaGVTZXJ2aWNlKSBwcm90ZWN0ZWQgY2FjaGU6IFN0cmF0ZWd5Q2FjaGVTZXJ2aWNlKSB7fVxyXG5cclxuXHRnZXQoa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG5cdFx0cmV0dXJuIG9mKHRoaXMuY2FjaGUuZ2V0KHRoaXMubmFtZSwga2V5KSk7XHJcblx0fVxyXG5cclxuXHRzZXQoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG5cdFx0dGhpcy5jYWNoZS5zZXQodGhpcy5uYW1lLCBrZXksIHZhbHVlKTtcclxuXHRcdHRoaXMua2V5Q2hhbmdlcy5uZXh0KGtleSk7XHJcblx0XHRyZXR1cm4gb2YodmFsdWUpO1xyXG5cdH1cclxuXHJcblx0ZGVsKGtleTogc3RyaW5nKTogT2JzZXJ2YWJsZTx2b2lkPiB7XHJcblx0XHR0aGlzLmNhY2hlLmRlbCh0aGlzLm5hbWUsIGtleSk7XHJcblx0XHR0aGlzLmtleUNoYW5nZXMubmV4dChrZXkpO1xyXG5cdFx0cmV0dXJuIG9mKG51bGwpO1xyXG5cdH1cclxuXHJcblx0Y2xlYXIoKTogT2JzZXJ2YWJsZTx2b2lkPiB7XHJcblx0XHR0aGlzLmNhY2hlLmNsZWFyKHRoaXMubmFtZSk7XHJcblx0XHR0aGlzLmtleUNoYW5nZXMubmV4dChudWxsKTtcclxuXHRcdHJldHVybiBvZihudWxsKTtcclxuXHR9XHJcblxyXG59XHJcbiJdfQ==