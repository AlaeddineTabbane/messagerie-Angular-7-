/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { Inject, Injectable, Optional } from '@angular/core';
import { STORAGE_STRATEGIES } from '../strategies';
import { StorageStrategies } from '../constants/strategy';
import * as i0 from "@angular/core";
import * as i1 from "../strategies/index";
/** @type {?} */
export var InvalidStrategyError = 'invalid_strategy';
var StrategyIndex = /** @class */ (function () {
    function StrategyIndex(strategies) {
        this.strategies = strategies;
        this.registration$ = new Subject();
        if (!strategies)
            strategies = [];
        this.strategies = strategies.reverse()
            .map(function (strategy, index, arr) { return strategy.name; })
            .map(function (name, index, arr) { return arr.indexOf(name) === index ? index : null; })
            .filter(function (index) { return index !== null; })
            .map(function (index) { return strategies[index]; });
    }
    /**
     * @param {?} name
     * @return {?}
     */
    StrategyIndex.get = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        if (!this.isStrategyRegistered(name))
            throw Error(InvalidStrategyError);
        /** @type {?} */
        var strategy = StrategyIndex.index[name];
        if (!strategy.isAvailable) {
            strategy = StrategyIndex.index[StorageStrategies.InMemory];
        }
        return strategy;
    };
    /**
     * @param {?} name
     * @param {?} strategy
     * @return {?}
     */
    StrategyIndex.set = /**
     * @param {?} name
     * @param {?} strategy
     * @return {?}
     */
    function (name, strategy) {
        StrategyIndex.index[name] = strategy;
    };
    /**
     * @param {?=} name
     * @return {?}
     */
    StrategyIndex.clear = /**
     * @param {?=} name
     * @return {?}
     */
    function (name) {
        if (name !== undefined)
            delete StrategyIndex.index[name];
        else
            StrategyIndex.index = {};
    };
    /**
     * @param {?} name
     * @return {?}
     */
    StrategyIndex.isStrategyRegistered = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return name in StrategyIndex.index;
    };
    /**
     * @return {?}
     */
    StrategyIndex.hasRegistredStrategies = /**
     * @return {?}
     */
    function () {
        return Object.keys(StrategyIndex.index).length > 0;
    };
    /**
     * @param {?} name
     * @return {?}
     */
    StrategyIndex.prototype.getStrategy = /**
     * @param {?} name
     * @return {?}
     */
    function (name) {
        return StrategyIndex.get(name);
    };
    /**
     * @return {?}
     */
    StrategyIndex.prototype.indexStrategies = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.strategies.forEach(function (strategy) { return _this.register(strategy.name, strategy); });
    };
    /**
     * @param {?} name
     * @param {?=} overrideIfExists
     * @return {?}
     */
    StrategyIndex.prototype.indexStrategy = /**
     * @param {?} name
     * @param {?=} overrideIfExists
     * @return {?}
     */
    function (name, overrideIfExists) {
        if (overrideIfExists === void 0) { overrideIfExists = false; }
        if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists)
            return StrategyIndex.get(name);
        /** @type {?} */
        var strategy = this.strategies.find(function (strategy) { return strategy.name === name; });
        if (!strategy)
            throw new Error(InvalidStrategyError);
        this.register(name, strategy, overrideIfExists);
        return strategy;
    };
    /**
     * @param {?} name
     * @param {?} strategy
     * @param {?=} overrideIfExists
     * @return {?}
     */
    StrategyIndex.prototype.register = /**
     * @param {?} name
     * @param {?} strategy
     * @param {?=} overrideIfExists
     * @return {?}
     */
    function (name, strategy, overrideIfExists) {
        if (overrideIfExists === void 0) { overrideIfExists = false; }
        if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {
            StrategyIndex.set(name, strategy);
            this.registration$.next(name);
        }
    };
    StrategyIndex.index = {};
    StrategyIndex.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */
    StrategyIndex.ctorParameters = function () { return [
        { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [STORAGE_STRATEGIES,] }] }
    ]; };
    /** @nocollapse */ StrategyIndex.ngInjectableDef = i0.defineInjectable({ factory: function StrategyIndex_Factory() { return new StrategyIndex(i0.inject(i1.STORAGE_STRATEGIES, 8)); }, token: StrategyIndex, providedIn: "root" });
    return StrategyIndex;
}());
export { StrategyIndex };
if (false) {
    /** @type {?} */
    StrategyIndex.index;
    /** @type {?} */
    StrategyIndex.prototype.registration$;
    /** @type {?} */
    StrategyIndex.prototype.strategies;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyYXRlZ3lJbmRleC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC13ZWJzdG9yYWdlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N0cmF0ZWd5SW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQzs7OztBQUV4RCxNQUFNLEtBQU8sb0JBQW9CLEdBQUcsa0JBQWtCO0FBRXREO0lBTUMsdUJBQThELFVBQWtDO1FBQWxDLGVBQVUsR0FBVixVQUFVLENBQXdCO1FBRnZGLGtCQUFhLEdBQW9CLElBQUksT0FBTyxFQUFFLENBQUM7UUFHdkQsSUFBSSxDQUFDLFVBQVU7WUFBRSxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRTthQUNwQyxHQUFHLENBQUMsVUFBQyxRQUE4QixFQUFFLEtBQUssRUFBRSxHQUFHLElBQUssT0FBQSxRQUFRLENBQUMsSUFBSSxFQUFiLENBQWEsQ0FBQzthQUNsRSxHQUFHLENBQUMsVUFBQyxJQUFZLEVBQUUsS0FBSyxFQUFFLEdBQUcsSUFBSyxPQUFBLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBMUMsQ0FBMEMsQ0FBQzthQUM3RSxNQUFNLENBQUMsVUFBQyxLQUFhLElBQUssT0FBQSxLQUFLLEtBQUssSUFBSSxFQUFkLENBQWMsQ0FBQzthQUN6QyxHQUFHLENBQUMsVUFBQyxLQUFhLElBQUssT0FBQSxVQUFV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QTZDLEVBQUUsQ0FBQzs7Z0JBSDVELFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7Ozs7NENBTWxCLFFBQVEsWUFBSSxNQUFNLFNBQUMsa0JBQWtCOzs7d0JBZG5EO0NBd0VDLEFBaEVELElBZ0VDO1NBL0RZLGFBQWE7OztJQUV6QixvQkFBNEQ7O0lBQzVELHNDQUF3RDs7SUFFNUMsbUNBQW9GIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdG9yYWdlU3RyYXRlZ3l9IGZyb20gJy4uL2NvcmUvaW50ZXJmYWNlcy9zdG9yYWdlU3RyYXRlZ3knO1xyXG5pbXBvcnQge1N1YmplY3R9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge0luamVjdCwgSW5qZWN0YWJsZSwgT3B0aW9uYWx9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xyXG5pbXBvcnQge1NUT1JBR0VfU1RSQVRFR0lFU30gZnJvbSAnLi4vc3RyYXRlZ2llcyc7XHJcbmltcG9ydCB7U3RvcmFnZVN0cmF0ZWdpZXN9IGZyb20gJy4uL2NvbnN0YW50cy9zdHJhdGVneSc7XHJcblxyXG5leHBvcnQgY29uc3QgSW52YWxpZFN0cmF0ZWd5RXJyb3IgPSAnaW52YWxpZF9zdHJhdGVneSc7XHJcblxyXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcclxuZXhwb3J0IGNsYXNzIFN0cmF0ZWd5SW5kZXgge1xyXG5cclxuXHRzdGF0aWMgaW5kZXg6IHsgW25hbWU6IHN0cmluZ106IFN0b3JhZ2VTdHJhdGVneTxhbnk+IH0gPSB7fTtcclxuXHRyZWFkb25seSByZWdpc3RyYXRpb24kOiBTdWJqZWN0PHN0cmluZz4gPSBuZXcgU3ViamVjdCgpO1xyXG5cclxuXHRjb25zdHJ1Y3RvcihAT3B0aW9uYWwoKSBASW5qZWN0KFNUT1JBR0VfU1RSQVRFR0lFUykgcHJvdGVjdGVkIHN0cmF0ZWdpZXM6IFN0b3JhZ2VTdHJhdGVneTxhbnk+W10pIHtcclxuXHRcdGlmICghc3RyYXRlZ2llcykgc3RyYXRlZ2llcyA9IFtdO1xyXG5cdFx0dGhpcy5zdHJhdGVnaWVzID0gc3RyYXRlZ2llcy5yZXZlcnNlKClcclxuXHRcdFx0Lm1hcCgoc3RyYXRlZ3k6IFN0b3JhZ2VTdHJhdGVneTxhbnk+LCBpbmRleCwgYXJyKSA9PiBzdHJhdGVneS5uYW1lKVxyXG5cdFx0XHQubWFwKChuYW1lOiBzdHJpbmcsIGluZGV4LCBhcnIpID0+IGFyci5pbmRleE9mKG5hbWUpID09PSBpbmRleCA/IGluZGV4IDogbnVsbClcclxuXHRcdFx0LmZpbHRlcigoaW5kZXg6IG51bWJlcikgPT4gaW5kZXggIT09IG51bGwpXHJcblx0XHRcdC5tYXAoKGluZGV4OiBudW1iZXIpID0+IHN0cmF0ZWdpZXNbaW5kZXhdKTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBnZXQobmFtZTogc3RyaW5nKTogU3RvcmFnZVN0cmF0ZWd5PGFueT4ge1xyXG5cdFx0aWYgKCF0aGlzLmlzU3RyYXRlZ3lSZWdpc3RlcmVkKG5hbWUpKSB0aHJvdyBFcnJvcihJbnZhbGlkU3RyYXRlZ3lFcnJvcik7XHJcblx0XHRsZXQgc3RyYXRlZ3k6IFN0b3JhZ2VTdHJhdGVneTxhbnk+ID0gU3RyYXRlZ3lJbmRleC5pbmRleFtuYW1lXTtcclxuXHRcdGlmICghc3RyYXRlZ3kuaXNBdmFpbGFibGUpIHtcclxuXHRcdFx0c3RyYXRlZ3kgPSBTdHJhdGVneUluZGV4LmluZGV4W1N0b3JhZ2VTdHJhdGVnaWVzLkluTWVtb3J5XTtcclxuXHRcdH1cclxuXHRcdHJldHVybiBzdHJhdGVneTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBzZXQobmFtZTogc3RyaW5nLCBzdHJhdGVneSk6IHZvaWQge1xyXG5cdFx0U3RyYXRlZ3lJbmRleC5pbmRleFtuYW1lXSA9IHN0cmF0ZWd5O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGNsZWFyKG5hbWU/OiBzdHJpbmcpOiB2b2lkIHtcclxuXHRcdGlmIChuYW1lICE9PSB1bmRlZmluZWQpIGRlbGV0ZSBTdHJhdGVneUluZGV4LmluZGV4W25hbWVdO1xyXG5cdFx0ZWxzZSBTdHJhdGVneUluZGV4LmluZGV4ID0ge307XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgaXNTdHJhdGVneVJlZ2lzdGVyZWQobmFtZTogc3RyaW5nKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gbmFtZSBpbiBTdHJhdGVneUluZGV4LmluZGV4O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGhhc1JlZ2lzdHJlZFN0cmF0ZWdpZXMoKTogYm9vbGVhbiB7XHJcblx0XHRyZXR1cm4gT2JqZWN0LmtleXMoU3RyYXRlZ3lJbmRleC5pbmRleCkubGVuZ3RoID4gMDtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBnZXRTdHJhdGVneShuYW1lOiBzdHJpbmcpOiBTdG9yYWdlU3RyYXRlZ3k8YW55PiB7XHJcblx0XHRyZXR1cm4gU3RyYXRlZ3lJbmRleC5nZXQobmFtZSk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgaW5kZXhTdHJhdGVnaWVzKCkge1xyXG5cdFx0dGhpcy5zdHJhdGVnaWVzLmZvckVhY2goKHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55PikgPT4gdGhpcy5yZWdpc3RlcihzdHJhdGVneS5uYW1lLCBzdHJhdGVneSkpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGluZGV4U3RyYXRlZ3kobmFtZTogc3RyaW5nLCBvdmVycmlkZUlmRXhpc3RzOiBib29sZWFuID0gZmFsc2UpOiBTdG9yYWdlU3RyYXRlZ3k8YW55PiB7XHJcblx0XHRpZiAoU3RyYXRlZ3lJbmRleC5pc1N0cmF0ZWd5UmVnaXN0ZXJlZChuYW1lKSAmJiAhb3ZlcnJpZGVJZkV4aXN0cykgcmV0dXJuIFN0cmF0ZWd5SW5kZXguZ2V0KG5hbWUpO1xyXG5cdFx0Y29uc3Qgc3RyYXRlZ3k6IFN0b3JhZ2VTdHJhdGVneTxhbnk+ID0gdGhpcy5zdHJhdGVnaWVzLmZpbmQoKHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55PikgPT4gc3RyYXRlZ3kubmFtZSA9PT0gbmFtZSk7XHJcblx0XHRpZiAoIXN0cmF0ZWd5KSB0aHJvdyBuZXcgRXJyb3IoSW52YWxpZFN0cmF0ZWd5RXJyb3IpO1xyXG5cdFx0dGhpcy5yZWdpc3RlcihuYW1lLCBzdHJhdGVneSwgb3ZlcnJpZGVJZkV4aXN0cyk7XHJcblx0XHRyZXR1cm4gc3RyYXRlZ3k7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgcmVnaXN0ZXIobmFtZTogc3RyaW5nLCBzdHJhdGVneTogU3RvcmFnZVN0cmF0ZWd5PGFueT4sIG92ZXJyaWRlSWZFeGlzdHM6IGJvb2xlYW4gPSBmYWxzZSkge1xyXG5cdFx0aWYgKCFTdHJhdGVneUluZGV4LmlzU3RyYXRlZ3lSZWdpc3RlcmVkKG5hbWUpIHx8IG92ZXJyaWRlSWZFeGlzdHMpIHtcclxuXHRcdFx0U3RyYXRlZ3lJbmRleC5zZXQobmFtZSwgc3RyYXRlZ3kpO1xyXG5cdFx0XHR0aGlzLnJlZ2lzdHJhdGlvbiQubmV4dChuYW1lKTtcclxuXHRcdH1cclxuXHR9XHJcblxyXG59XHJcblxyXG4iXX0=