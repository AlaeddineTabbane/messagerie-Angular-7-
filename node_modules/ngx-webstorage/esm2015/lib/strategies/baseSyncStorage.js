/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { of, Subject } from 'rxjs';
import { CompatHelper } from '../helpers/compat';
/**
 * @abstract
 */
export class BaseSyncStorageStrategy {
    /**
     * @param {?} storage
     * @param {?} cache
     */
    constructor(storage, cache) {
        this.storage = storage;
        this.cache = cache;
        this.keyChanges = new Subject();
    }
    /**
     * @return {?}
     */
    get isAvailable() {
        if (this._isAvailable === undefined)
            this._isAvailable = CompatHelper.isStorageAvailable(this.storage);
        return this._isAvailable;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    get(key) {
        /** @type {?} */
        let data = this.cache.get(this.name, key);
        if (data !== undefined)
            return of(data);
        try {
            /** @type {?} */
            const item = this.storage.getItem(key);
            if (item !== null) {
                data = JSON.parse(item);
                this.cache.set(this.name, key, data);
            }
        }
        catch (err) {
            console.warn(err);
        }
        return of(data);
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    set(key, value) {
        /** @type {?} */
        const data = JSON.stringify(value);
        this.storage.setItem(key, data);
        this.cache.set(this.name, key, value);
        this.keyChanges.next(key);
        return of(value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    del(key) {
        this.storage.removeItem(key);
        this.cache.del(this.name, key);
        this.keyChanges.next(key);
        return of(null);
    }
    /**
     * @return {?}
     */
    clear() {
        this.storage.clear();
        this.cache.clear(this.name);
        this.keyChanges.next(null);
        return of(null);
    }
}
if (false) {
    /** @type {?} */
    BaseSyncStorageStrategy.prototype.keyChanges;
    /** @type {?} */
    BaseSyncStorageStrategy.prototype._isAvailable;
    /** @type {?} */
    BaseSyncStorageStrategy.prototype.name;
    /** @type {?} */
    BaseSyncStorageStrategy.prototype.storage;
    /** @type {?} */
    BaseSyncStorageStrategy.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZVN5bmNTdG9yYWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXdlYnN0b3JhZ2UvIiwic291cmNlcyI6WyJsaWIvc3RyYXRlZ2llcy9iYXNlU3luY1N0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBYSxFQUFFLEVBQUUsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRTdDLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7OztBQUcvQyxNQUFNLE9BQWdCLHVCQUF1Qjs7Ozs7SUFHNUMsWUFBc0IsT0FBbUIsRUFBWSxLQUEyQjtRQUExRCxZQUFPLEdBQVAsT0FBTyxDQUFZO1FBQVksVUFBSyxHQUFMLEtBQUssQ0FBc0I7UUFGdkUsZUFBVSxHQUFvQixJQUFJLE9BQU8sRUFBRSxDQUFDO0lBRThCLENBQUM7Ozs7SUFJcEYsSUFBSSxXQUFXO1FBQ2QsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLFNBQVM7WUFBRSxJQUFJLENBQUMsWUFBWSxHQUFHLFlBQVksQ0FBQyxrQkFBa0IsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDdkcsT0FBTyxJQUFJLENBQUMsWUFBWSxDQUFDO0lBQzFCLENBQUM7Ozs7O0lBSUQsR0FBRyxDQUFDLEdBQVc7O1lBQ1YsSUFBSSxHQUFRLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDO1FBQzlDLElBQUksSUFBSSxLQUFLLFNBQVM7WUFBRSxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUV4QyxJQUFJOztrQkFDRyxJQUFJLEdBQVEsSUFBSSxDQUFDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDO1lBQzNDLElBQUksSUFBSSxLQUFLLElBQUksRUFBRTtnQkFDbEIsSUFBSSxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUM7Z0JBQ3hCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLElBQUksQ0FBQyxDQUFDO2FBQ3JDO1NBQ0Q7UUFBQyxPQUFNLEdBQUcsRUFBRTtZQUNaLE9BQU8sQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7U0FDbEI7UUFFRCxPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQixDQUFDOzs7Ozs7SUFFRCxHQUFHLENBQUMsR0FBVyxFQUFFLEtBQVU7O2NBQ3BCLElBQUksR0FBVyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUMxQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEIsQ0FBQzs7Ozs7SUFFRCxHQUFHLENBQUMsR0FBVztRQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakIsQ0FBQzs7OztJQUVELEtBQUs7UUFDSixJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQ3JCLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQixDQUFDO0NBRUQ7OztJQXBEQSw2Q0FBcUQ7O0lBSXJELCtDQUFnQzs7SUFPaEMsdUNBQStCOztJQVRuQiwwQ0FBNkI7O0lBQUUsd0NBQXFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtTdG9yYWdlU3RyYXRlZ3l9IGZyb20gJy4uL2NvcmUvaW50ZXJmYWNlcy9zdG9yYWdlU3RyYXRlZ3knO1xyXG5pbXBvcnQge09ic2VydmFibGUsIG9mLCBTdWJqZWN0fSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtTdHJhdGVneUNhY2hlU2VydmljZX0gZnJvbSAnLi4vY29yZS9zdHJhdGVneUNhY2hlJztcclxuaW1wb3J0IHtDb21wYXRIZWxwZXJ9IGZyb20gJy4uL2hlbHBlcnMvY29tcGF0JztcclxuaW1wb3J0IHtXZWJTdG9yYWdlfSBmcm9tICcuLi9jb3JlL2ludGVyZmFjZXMvd2ViU3RvcmFnZSc7XHJcblxyXG5leHBvcnQgYWJzdHJhY3QgY2xhc3MgQmFzZVN5bmNTdG9yYWdlU3RyYXRlZ3kgaW1wbGVtZW50cyBTdG9yYWdlU3RyYXRlZ3k8YW55PiB7XHJcblx0cmVhZG9ubHkga2V5Q2hhbmdlczogU3ViamVjdDxzdHJpbmc+ID0gbmV3IFN1YmplY3QoKTtcclxuXHRcclxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc3RvcmFnZTogV2ViU3RvcmFnZSwgcHJvdGVjdGVkIGNhY2hlOiBTdHJhdGVneUNhY2hlU2VydmljZSkge31cclxuXHRcclxuXHRwcm90ZWN0ZWQgX2lzQXZhaWxhYmxlOiBib29sZWFuO1xyXG5cdFxyXG5cdGdldCBpc0F2YWlsYWJsZSgpOiBib29sZWFuIHtcclxuXHRcdGlmICh0aGlzLl9pc0F2YWlsYWJsZSA9PT0gdW5kZWZpbmVkKSB0aGlzLl9pc0F2YWlsYWJsZSA9IENvbXBhdEhlbHBlci5pc1N0b3JhZ2VBdmFpbGFibGUodGhpcy5zdG9yYWdlKTtcclxuXHRcdHJldHVybiB0aGlzLl9pc0F2YWlsYWJsZTtcclxuXHR9XHJcblx0XHJcblx0YWJzdHJhY3QgcmVhZG9ubHkgbmFtZTogc3RyaW5nO1xyXG5cdFxyXG5cdGdldChrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcblx0XHRsZXQgZGF0YTogYW55ID0gdGhpcy5jYWNoZS5nZXQodGhpcy5uYW1lLCBrZXkpO1xyXG5cdFx0aWYgKGRhdGEgIT09IHVuZGVmaW5lZCkgcmV0dXJuIG9mKGRhdGEpO1xyXG5cdFx0XHJcblx0XHR0cnkge1xyXG5cdFx0XHRjb25zdCBpdGVtOiBhbnkgPSB0aGlzLnN0b3JhZ2UuZ2V0SXRlbShrZXkpO1xyXG5cdFx0XHRpZiAoaXRlbSAhPT0gbnVsbCkge1xyXG5cdFx0XHRcdGRhdGEgPSBKU09OLnBhcnNlKGl0ZW0pO1xyXG5cdFx0XHRcdHRoaXMuY2FjaGUuc2V0KHRoaXMubmFtZSwga2V5LCBkYXRhKTtcclxuXHRcdFx0fVxyXG5cdFx0fSBjYXRjaChlcnIpIHtcclxuXHRcdFx0Y29uc29sZS53YXJuKGVycik7XHJcblx0XHR9XHJcblx0XHRcclxuXHRcdHJldHVybiBvZihkYXRhKTtcclxuXHR9XHJcblx0XHJcblx0c2V0KGtleTogc3RyaW5nLCB2YWx1ZTogYW55KTogT2JzZXJ2YWJsZTxhbnk+IHtcclxuXHRcdGNvbnN0IGRhdGE6IHN0cmluZyA9IEpTT04uc3RyaW5naWZ5KHZhbHVlKTtcclxuXHRcdHRoaXMuc3RvcmFnZS5zZXRJdGVtKGtleSwgZGF0YSk7XHJcblx0XHR0aGlzLmNhY2hlLnNldCh0aGlzLm5hbWUsIGtleSwgdmFsdWUpO1xyXG5cdFx0dGhpcy5rZXlDaGFuZ2VzLm5leHQoa2V5KTtcclxuXHRcdHJldHVybiBvZih2YWx1ZSk7XHJcblx0fVxyXG5cdFxyXG5cdGRlbChrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG5cdFx0dGhpcy5zdG9yYWdlLnJlbW92ZUl0ZW0oa2V5KTtcclxuXHRcdHRoaXMuY2FjaGUuZGVsKHRoaXMubmFtZSwga2V5KTtcclxuXHRcdHRoaXMua2V5Q2hhbmdlcy5uZXh0KGtleSk7XHJcblx0XHRyZXR1cm4gb2YobnVsbCk7XHJcblx0fVxyXG5cdFxyXG5cdGNsZWFyKCk6IE9ic2VydmFibGU8dm9pZD4ge1xyXG5cdFx0dGhpcy5zdG9yYWdlLmNsZWFyKCk7XHJcblx0XHR0aGlzLmNhY2hlLmNsZWFyKHRoaXMubmFtZSk7XHJcblx0XHR0aGlzLmtleUNoYW5nZXMubmV4dChudWxsKTtcclxuXHRcdHJldHVybiBvZihudWxsKTtcclxuXHR9XHJcblx0XHJcbn1cclxuIl19