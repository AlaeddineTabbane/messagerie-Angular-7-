/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import * as i0 from "@angular/core";
/**
 * @record
 */
export function StrategyCache() { }
var StrategyCacheService = /** @class */ (function () {
    function StrategyCacheService() {
        this.caches = {};
    }
    /**
     * @param {?} strategyName
     * @param {?} key
     * @return {?}
     */
    StrategyCacheService.prototype.get = /**
     * @param {?} strategyName
     * @param {?} key
     * @return {?}
     */
    function (strategyName, key) {
        return this.getCacheStore(strategyName)[key];
    };
    /**
     * @param {?} strategyName
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    StrategyCacheService.prototype.set = /**
     * @param {?} strategyName
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (strategyName, key, value) {
        this.getCacheStore(strategyName)[key] = value;
    };
    /**
     * @param {?} strategyName
     * @param {?} key
     * @return {?}
     */
    StrategyCacheService.prototype.del = /**
     * @param {?} strategyName
     * @param {?} key
     * @return {?}
     */
    function (strategyName, key) {
        delete this.getCacheStore(strategyName)[key];
    };
    /**
     * @param {?} strategyName
     * @return {?}
     */
    StrategyCacheService.prototype.clear = /**
     * @param {?} strategyName
     * @return {?}
     */
    function (strategyName) {
        this.caches[strategyName] = (/** @type {?} */ ({}));
    };
    /**
     * @param {?} strategyName
     * @return {?}
     */
    StrategyCacheService.prototype.getCacheStore = /**
     * @param {?} strategyName
     * @return {?}
     */
    function (strategyName) {
        if (strategyName in this.caches)
            return this.caches[strategyName];
        return this.caches[strategyName] = (/** @type {?} */ ({}));
    };
    StrategyCacheService.decorators = [
        { type: Injectable, args: [{ providedIn: 'root' },] }
    ];
    /** @nocollapse */ StrategyCacheService.ngInjectableDef = i0.defineInjectable({ factory: function StrategyCacheService_Factory() { return new StrategyCacheService(); }, token: StrategyCacheService, providedIn: "root" });
    return StrategyCacheService;
}());
export { StrategyCacheService };
if (false) {
    /** @type {?} */
    StrategyCacheService.prototype.caches;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyYXRlZ3lDYWNoZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC13ZWJzdG9yYWdlLyIsInNvdXJjZXMiOlsibGliL2NvcmUvc3RyYXRlZ3lDYWNoZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsT0FBTyxFQUFDLFVBQVUsRUFBQyxNQUFNLGVBQWUsQ0FBQzs7Ozs7QUFFekMsbUNBRUM7QUFFRDtJQUFBO1FBR1csV0FBTSxHQUFzQyxFQUFFLENBQUM7S0FzQnpEOzs7Ozs7SUFwQkEsa0NBQUc7Ozs7O0lBQUgsVUFBSSxZQUFvQixFQUFFLEdBQVc7UUFDcEMsT0FBTyxJQUFJLENBQUMsYUFBYSxDQUFDLFlBQVksQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0lBQzlDLENBQUM7Ozs7Ozs7SUFFRCxrQ0FBRzs7Ozs7O0lBQUgsVUFBSSxZQUFvQixFQUFFLEdBQVcsRUFBRSxLQUFVO1FBQ2hELElBQUksQ0FBQyxhQUFhLENBQUMsWUFBWSxDQUFDLENBQUMsR0FBRyxDQUFDLEdBQUcsS0FBSyxDQUFDO0lBQy9DLENBQUM7Ozs7OztJQUVELGtDQUFHOzs7OztJQUFILFVBQUksWUFBb0IsRUFBRSxHQUFXO1FBQ3BDLE9BQU8sSUFBSSxDQUFDLGFBQWEsQ0FBQyxZQUFZLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUM5QyxDQUFDOzs7OztJQUVELG9DQUFLOzs7O0lBQUwsVUFBTSxZQUFvQjtRQUN6QixJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxHQUFHLG1CQUFBLEVBQUUsRUFBaUIsQ0FBQztJQUNqRCxDQUFDOzs7OztJQUVTLDRDQUFhOzs7O0lBQXZCLFVBQXdCLFlBQW9CO1FBQzNDLElBQUksWUFBWSxJQUFJLElBQUksQ0FBQyxNQUFNO1lBQUUsT0FBTyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxDQUFDO1FBQ2xFLE9BQU8sSUFBSSxDQUFDLE1BQU0sQ0FBQyxZQUFZLENBQUMsR0FBRyxtQkFBQSxFQUFFLEVBQWlCLENBQUM7SUFDeEQsQ0FBQzs7Z0JBeEJELFVBQVUsU0FBQyxFQUFDLFVBQVUsRUFBRSxNQUFNLEVBQUM7OzsrQkFOaEM7Q0ErQkMsQUF6QkQsSUF5QkM7U0F4Qlksb0JBQW9COzs7SUFFaEMsc0NBQXlEIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCBpbnRlcmZhY2UgU3RyYXRlZ3lDYWNoZSB7XHJcblx0W2tleTogc3RyaW5nXTogYW55O1xyXG59XHJcblxyXG5ASW5qZWN0YWJsZSh7cHJvdmlkZWRJbjogJ3Jvb3QnfSlcclxuZXhwb3J0IGNsYXNzIFN0cmF0ZWd5Q2FjaGVTZXJ2aWNlIHtcclxuXHJcblx0cHJvdGVjdGVkIGNhY2hlczogeyBbbmFtZTogc3RyaW5nXTogU3RyYXRlZ3lDYWNoZSB9ID0ge307XHJcblxyXG5cdGdldChzdHJhdGVneU5hbWU6IHN0cmluZywga2V5OiBzdHJpbmcpIHtcclxuXHRcdHJldHVybiB0aGlzLmdldENhY2hlU3RvcmUoc3RyYXRlZ3lOYW1lKVtrZXldO1xyXG5cdH1cclxuXHJcblx0c2V0KHN0cmF0ZWd5TmFtZTogc3RyaW5nLCBrZXk6IHN0cmluZywgdmFsdWU6IGFueSkge1xyXG5cdFx0dGhpcy5nZXRDYWNoZVN0b3JlKHN0cmF0ZWd5TmFtZSlba2V5XSA9IHZhbHVlO1xyXG5cdH1cclxuXHJcblx0ZGVsKHN0cmF0ZWd5TmFtZTogc3RyaW5nLCBrZXk6IHN0cmluZykge1xyXG5cdFx0ZGVsZXRlIHRoaXMuZ2V0Q2FjaGVTdG9yZShzdHJhdGVneU5hbWUpW2tleV07XHJcblx0fVxyXG5cclxuXHRjbGVhcihzdHJhdGVneU5hbWU6IHN0cmluZykge1xyXG5cdFx0dGhpcy5jYWNoZXNbc3RyYXRlZ3lOYW1lXSA9IHt9IGFzIFN0cmF0ZWd5Q2FjaGU7XHJcblx0fVxyXG5cclxuXHRwcm90ZWN0ZWQgZ2V0Q2FjaGVTdG9yZShzdHJhdGVneU5hbWU6IHN0cmluZyk6IFN0cmF0ZWd5Q2FjaGUge1xyXG5cdFx0aWYgKHN0cmF0ZWd5TmFtZSBpbiB0aGlzLmNhY2hlcykgcmV0dXJuIHRoaXMuY2FjaGVzW3N0cmF0ZWd5TmFtZV07XHJcblx0XHRyZXR1cm4gdGhpcy5jYWNoZXNbc3RyYXRlZ3lOYW1lXSA9IHt9IGFzIFN0cmF0ZWd5Q2FjaGU7XHJcblx0fVxyXG59XHJcbiJdfQ==