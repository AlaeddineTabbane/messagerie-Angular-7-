(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('rxjs/operators'), require('@angular/core'), require('rxjs'), require('@angular/common')) :
    typeof define === 'function' && define.amd ? define('ngx-webstorage', ['exports', 'rxjs/operators', '@angular/core', 'rxjs', '@angular/common'], factory) :
    (factory((global['ngx-webstorage'] = {}),global.rxjs.operators,global.ng.core,global.rxjs,global.ng.common));
}(this, (function (exports,operators,i0,rxjs,common) { 'use strict';

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @enum {string} */
    var StorageStrategies = {
        Local: 'local_strategy',
        Session: 'session_strategy',
        InMemory: 'in_memory_strategy',
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @return {?}
     */
    function noop() { }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var DefaultPrefix = 'ngx-webstorage';
    /** @type {?} */
    var DefaultSeparator = '|';
    /** @type {?} */
    var DefaultIsCaseSensitive = false;

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var StorageKeyManager = /** @class */ (function () {
        function StorageKeyManager() {
        }
        /**
         * @param {?} raw
         * @return {?}
         */
        StorageKeyManager.normalize = /**
         * @param {?} raw
         * @return {?}
         */
            function (raw) {
                raw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();
                return "" + StorageKeyManager.prefix + StorageKeyManager.separator + raw;
            };
        /**
         * @param {?} key
         * @return {?}
         */
        StorageKeyManager.isNormalizedKey = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;
            };
        /**
         * @param {?} prefix
         * @return {?}
         */
        StorageKeyManager.setPrefix = /**
         * @param {?} prefix
         * @return {?}
         */
            function (prefix) {
                StorageKeyManager.prefix = prefix;
            };
        /**
         * @param {?} separator
         * @return {?}
         */
        StorageKeyManager.setSeparator = /**
         * @param {?} separator
         * @return {?}
         */
            function (separator) {
                StorageKeyManager.separator = separator;
            };
        /**
         * @param {?} enable
         * @return {?}
         */
        StorageKeyManager.setCaseSensitive = /**
         * @param {?} enable
         * @return {?}
         */
            function (enable) {
                StorageKeyManager.isCaseSensitive = enable;
            };
        /**
         * @param {?} config
         * @return {?}
         */
        StorageKeyManager.consumeConfiguration = /**
         * @param {?} config
         * @return {?}
         */
            function (config) {
                if ('prefix' in config)
                    this.setPrefix(config.prefix);
                if ('separator' in config)
                    this.setSeparator(config.separator);
                if ('caseSensitive' in config)
                    this.setCaseSensitive(config.caseSensitive);
            };
        StorageKeyManager.prefix = DefaultPrefix;
        StorageKeyManager.separator = DefaultSeparator;
        StorageKeyManager.isCaseSensitive = DefaultIsCaseSensitive;
        return StorageKeyManager;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SyncStorage = /** @class */ (function () {
        function SyncStorage(strategy) {
            this.strategy = strategy;
        }
        /**
         * @param {?} key
         * @return {?}
         */
        SyncStorage.prototype.retrieve = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var value;
                this.strategy.get(StorageKeyManager.normalize(key)).subscribe(function (result) { return value = typeof result === 'undefined' ? null : result; });
                return value;
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        SyncStorage.prototype.store = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);
                return value;
            };
        /**
         * @param {?=} key
         * @return {?}
         */
        SyncStorage.prototype.clear = /**
         * @param {?=} key
         * @return {?}
         */
            function (key) {
                if (key !== undefined)
                    this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);
                else
                    this.strategy.clear().subscribe(noop);
            };
        /**
         * @return {?}
         */
        SyncStorage.prototype.getStrategyName = /**
         * @return {?}
         */
            function () { return this.strategy.name; };
        /**
         * @param {?} key
         * @return {?}
         */
        SyncStorage.prototype.observe = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                var _this = this;
                key = StorageKeyManager.normalize(key);
                return this.strategy.keyChanges.pipe(operators.filter(function (changed) { return changed === null || changed === key; }), operators.switchMap(function () { return _this.strategy.get(key); }), operators.distinctUntilChanged(), operators.shareReplay());
            };
        return SyncStorage;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var AsyncStorage = /** @class */ (function () {
        function AsyncStorage(strategy) {
            this.strategy = strategy;
        }
        /**
         * @param {?} key
         * @return {?}
         */
        AsyncStorage.prototype.retrieve = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this.strategy.get(StorageKeyManager.normalize(key)).pipe(operators.map(function (value) { return typeof value === 'undefined' ? null : value; }));
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        AsyncStorage.prototype.store = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                return this.strategy.set(StorageKeyManager.normalize(key), value);
            };
        /**
         * @param {?=} key
         * @return {?}
         */
        AsyncStorage.prototype.clear = /**
         * @param {?=} key
         * @return {?}
         */
            function (key) {
                return key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();
            };
        /**
         * @return {?}
         */
        AsyncStorage.prototype.getStrategyName = /**
         * @return {?}
         */
            function () { return this.strategy.name; };
        /**
         * @param {?} key
         * @return {?}
         */
        AsyncStorage.prototype.observe = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                var _this = this;
                key = StorageKeyManager.normalize(key);
                return this.strategy.keyChanges.pipe(operators.filter(function (changed) { return changed === null || changed === key; }), operators.switchMap(function () { return _this.strategy.get(key); }), operators.distinctUntilChanged(), operators.shareReplay());
            };
        return AsyncStorage;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var StrategyCacheService = /** @class */ (function () {
        function StrategyCacheService() {
            this.caches = {};
        }
        /**
         * @param {?} strategyName
         * @param {?} key
         * @return {?}
         */
        StrategyCacheService.prototype.get = /**
         * @param {?} strategyName
         * @param {?} key
         * @return {?}
         */
            function (strategyName, key) {
                return this.getCacheStore(strategyName)[key];
            };
        /**
         * @param {?} strategyName
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        StrategyCacheService.prototype.set = /**
         * @param {?} strategyName
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (strategyName, key, value) {
                this.getCacheStore(strategyName)[key] = value;
            };
        /**
         * @param {?} strategyName
         * @param {?} key
         * @return {?}
         */
        StrategyCacheService.prototype.del = /**
         * @param {?} strategyName
         * @param {?} key
         * @return {?}
         */
            function (strategyName, key) {
                delete this.getCacheStore(strategyName)[key];
            };
        /**
         * @param {?} strategyName
         * @return {?}
         */
        StrategyCacheService.prototype.clear = /**
         * @param {?} strategyName
         * @return {?}
         */
            function (strategyName) {
                this.caches[strategyName] = ( /** @type {?} */({}));
            };
        /**
         * @param {?} strategyName
         * @return {?}
         */
        StrategyCacheService.prototype.getCacheStore = /**
         * @param {?} strategyName
         * @return {?}
         */
            function (strategyName) {
                if (strategyName in this.caches)
                    return this.caches[strategyName];
                return this.caches[strategyName] = ( /** @type {?} */({}));
            };
        StrategyCacheService.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */ StrategyCacheService.ngInjectableDef = i0.defineInjectable({ factory: function StrategyCacheService_Factory() { return new StrategyCacheService(); }, token: StrategyCacheService, providedIn: "root" });
        return StrategyCacheService;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LOCAL_STORAGE = new i0.InjectionToken('window_local_storage');
    /**
     * @return {?}
     */
    function getLocalStorage() {
        return (typeof window !== 'undefined') ? window.localStorage : null;
    }
    /** @type {?} */
    var LocalStorageProvider = { provide: LOCAL_STORAGE, useFactory: getLocalStorage };
    /** @type {?} */
    var SESSION_STORAGE = new i0.InjectionToken('window_session_storage');
    /**
     * @return {?}
     */
    function getSessionStorage() {
        return (typeof window !== 'undefined') ? window.sessionStorage : null;
    }
    /** @type {?} */
    var SessionStorageProvider = { provide: SESSION_STORAGE, useFactory: getSessionStorage };

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b)
                if (b.hasOwnProperty(p))
                    d[p] = b[p]; };
        return extendStatics(d, b);
    };
    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }
    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m)
            return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done)
                ar.push(r.value);
        }
        catch (error) {
            e = { error: error };
        }
        finally {
            try {
                if (r && !r.done && (m = i["return"]))
                    m.call(i);
            }
            finally {
                if (e)
                    throw e.error;
            }
        }
        return ar;
    }
    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var CompatHelper = /** @class */ (function () {
        function CompatHelper() {
        }
        /**
         * @param {?} storage
         * @return {?}
         */
        CompatHelper.isStorageAvailable = /**
         * @param {?} storage
         * @return {?}
         */
            function (storage) {
                /** @type {?} */
                var available = true;
                try {
                    if (typeof storage === 'object') {
                        storage.setItem('test-storage', 'foobar');
                        storage.removeItem('test-storage');
                    }
                    else
                        available = false;
                }
                catch (e) {
                    available = false;
                }
                return available;
            };
        return CompatHelper;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @abstract
     */
    var /**
     * @abstract
     */ BaseSyncStorageStrategy = /** @class */ (function () {
        function BaseSyncStorageStrategy(storage, cache) {
            this.storage = storage;
            this.cache = cache;
            this.keyChanges = new rxjs.Subject();
        }
        Object.defineProperty(BaseSyncStorageStrategy.prototype, "isAvailable", {
            get: /**
             * @return {?}
             */ function () {
                if (this._isAvailable === undefined)
                    this._isAvailable = CompatHelper.isStorageAvailable(this.storage);
                return this._isAvailable;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} key
         * @return {?}
         */
        BaseSyncStorageStrategy.prototype.get = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                /** @type {?} */
                var data = this.cache.get(this.name, key);
                if (data !== undefined)
                    return rxjs.of(data);
                try {
                    /** @type {?} */
                    var item = this.storage.getItem(key);
                    if (item !== null) {
                        data = JSON.parse(item);
                        this.cache.set(this.name, key, data);
                    }
                }
                catch (err) {
                    console.warn(err);
                }
                return rxjs.of(data);
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        BaseSyncStorageStrategy.prototype.set = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                /** @type {?} */
                var data = JSON.stringify(value);
                this.storage.setItem(key, data);
                this.cache.set(this.name, key, value);
                this.keyChanges.next(key);
                return rxjs.of(value);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        BaseSyncStorageStrategy.prototype.del = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                this.storage.removeItem(key);
                this.cache.del(this.name, key);
                this.keyChanges.next(key);
                return rxjs.of(null);
            };
        /**
         * @return {?}
         */
        BaseSyncStorageStrategy.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.storage.clear();
                this.cache.clear(this.name);
                this.keyChanges.next(null);
                return rxjs.of(null);
            };
        return BaseSyncStorageStrategy;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var LocalStorageStrategy = /** @class */ (function (_super) {
        __extends(LocalStorageStrategy, _super);
        function LocalStorageStrategy(storage, cache, platformId, zone) {
            var _this = _super.call(this, storage, cache) || this;
            _this.storage = storage;
            _this.cache = cache;
            _this.platformId = platformId;
            _this.zone = zone;
            _this.name = LocalStorageStrategy.strategyName;
            if (common.isPlatformBrowser(_this.platformId))
                _this.listenExternalChanges();
            return _this;
        }
        /**
         * @return {?}
         */
        LocalStorageStrategy.prototype.listenExternalChanges = /**
         * @return {?}
         */
            function () {
                var _this = this;
                window.addEventListener('storage', function (event) {
                    return _this.zone.run(function () {
                        if (event.storageArea !== _this.storage)
                            return;
                        /** @type {?} */
                        var key = event.key;
                        if (key !== null)
                            _this.cache.del(_this.name, event.key);
                        else
                            _this.cache.clear(_this.name);
                        _this.keyChanges.next(key);
                    });
                });
            };
        LocalStorageStrategy.strategyName = StorageStrategies.Local;
        /** @nocollapse */
        LocalStorageStrategy.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: [LOCAL_STORAGE,] }] },
                { type: StrategyCacheService },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] },
                { type: i0.NgZone }
            ];
        };
        return LocalStorageStrategy;
    }(BaseSyncStorageStrategy));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SessionStorageStrategy = /** @class */ (function (_super) {
        __extends(SessionStorageStrategy, _super);
        function SessionStorageStrategy(storage, cache, platformId, zone) {
            var _this = _super.call(this, storage, cache) || this;
            _this.storage = storage;
            _this.cache = cache;
            _this.platformId = platformId;
            _this.zone = zone;
            _this.name = SessionStorageStrategy.strategyName;
            if (common.isPlatformBrowser(_this.platformId))
                _this.listenExternalChanges();
            return _this;
        }
        /**
         * @return {?}
         */
        SessionStorageStrategy.prototype.listenExternalChanges = /**
         * @return {?}
         */
            function () {
                var _this = this;
                window.addEventListener('storage', function (event) {
                    return _this.zone.run(function () {
                        if (event.storageArea !== _this.storage)
                            return;
                        /** @type {?} */
                        var key = event.key;
                        if (event.key !== null)
                            _this.cache.del(_this.name, event.key);
                        else
                            _this.cache.clear(_this.name);
                        _this.keyChanges.next(key);
                    });
                });
            };
        SessionStorageStrategy.strategyName = StorageStrategies.Session;
        /** @nocollapse */
        SessionStorageStrategy.ctorParameters = function () {
            return [
                { type: undefined, decorators: [{ type: i0.Inject, args: [SESSION_STORAGE,] }] },
                { type: StrategyCacheService },
                { type: undefined, decorators: [{ type: i0.Inject, args: [i0.PLATFORM_ID,] }] },
                { type: i0.NgZone }
            ];
        };
        return SessionStorageStrategy;
    }(BaseSyncStorageStrategy));

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var InMemoryStorageStrategy = /** @class */ (function () {
        function InMemoryStorageStrategy(cache) {
            this.cache = cache;
            this.keyChanges = new rxjs.Subject();
            this.isAvailable = true;
            this.name = InMemoryStorageStrategy.strategyName;
        }
        /**
         * @param {?} key
         * @return {?}
         */
        InMemoryStorageStrategy.prototype.get = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return rxjs.of(this.cache.get(this.name, key));
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        InMemoryStorageStrategy.prototype.set = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                this.cache.set(this.name, key, value);
                this.keyChanges.next(key);
                return rxjs.of(value);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        InMemoryStorageStrategy.prototype.del = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                this.cache.del(this.name, key);
                this.keyChanges.next(key);
                return rxjs.of(null);
            };
        /**
         * @return {?}
         */
        InMemoryStorageStrategy.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.cache.clear(this.name);
                this.keyChanges.next(null);
                return rxjs.of(null);
            };
        InMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;
        /** @nocollapse */
        InMemoryStorageStrategy.ctorParameters = function () {
            return [
                { type: StrategyCacheService, decorators: [{ type: i0.Inject, args: [StrategyCacheService,] }] }
            ];
        };
        return InMemoryStorageStrategy;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var STORAGE_STRATEGIES = new i0.InjectionToken('STORAGE_STRATEGIES');
    /** @type {?} */
    var Strategies = [
        { provide: STORAGE_STRATEGIES, useClass: InMemoryStorageStrategy, multi: true },
        { provide: STORAGE_STRATEGIES, useClass: LocalStorageStrategy, multi: true },
        { provide: STORAGE_STRATEGIES, useClass: SessionStorageStrategy, multi: true },
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var StorageStrategyStubName = 'stub_strategy';
    var StorageStrategyStub = /** @class */ (function () {
        function StorageStrategyStub(name) {
            this.keyChanges = new rxjs.Subject();
            this.store = {};
            this._available = true;
            this.name = name || StorageStrategyStubName;
        }
        Object.defineProperty(StorageStrategyStub.prototype, "isAvailable", {
            get: /**
             * @return {?}
             */ function () {
                return this._available;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @param {?} key
         * @return {?}
         */
        StorageStrategyStub.prototype.get = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return rxjs.of(this.store[key]);
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        StorageStrategyStub.prototype.set = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                this.store[key] = value;
                this.keyChanges.next(key);
                return rxjs.of(value);
            };
        /**
         * @param {?} key
         * @return {?}
         */
        StorageStrategyStub.prototype.del = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                delete this.store[key];
                this.keyChanges.next(key);
                return rxjs.of(null);
            };
        /**
         * @return {?}
         */
        StorageStrategyStub.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.store = {};
                this.keyChanges.next(null);
                return rxjs.of(null);
            };
        /** @nocollapse */
        StorageStrategyStub.ctorParameters = function () {
            return [
                { type: String, decorators: [{ type: i0.Optional }] }
            ];
        };
        return StorageStrategyStub;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var StorageStub = /** @class */ (function () {
        function StorageStub() {
            this.store = {};
        }
        Object.defineProperty(StorageStub.prototype, "length", {
            get: /**
             * @return {?}
             */ function () {
                return Object.keys(this.store).length;
            },
            enumerable: true,
            configurable: true
        });
        /**
         * @return {?}
         */
        StorageStub.prototype.clear = /**
         * @return {?}
         */
            function () {
                this.store = {};
            };
        /**
         * @param {?} key
         * @return {?}
         */
        StorageStub.prototype.getItem = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                return this.store[key] || null;
            };
        /**
         * @param {?} index
         * @return {?}
         */
        StorageStub.prototype.key = /**
         * @param {?} index
         * @return {?}
         */
            function (index) {
                return Object.keys(this.store)[index];
            };
        /**
         * @param {?} key
         * @return {?}
         */
        StorageStub.prototype.removeItem = /**
         * @param {?} key
         * @return {?}
         */
            function (key) {
                delete this.store[key];
            };
        /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
        StorageStub.prototype.setItem = /**
         * @param {?} key
         * @param {?} value
         * @return {?}
         */
            function (key, value) {
                this.store[key] = value;
            };
        return StorageStub;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var InvalidStrategyError = 'invalid_strategy';
    var StrategyIndex = /** @class */ (function () {
        function StrategyIndex(strategies) {
            this.strategies = strategies;
            this.registration$ = new rxjs.Subject();
            if (!strategies)
                strategies = [];
            this.strategies = strategies.reverse()
                .map(function (strategy, index, arr) { return strategy.name; })
                .map(function (name, index, arr) { return arr.indexOf(name) === index ? index : null; })
                .filter(function (index) { return index !== null; })
                .map(function (index) { return strategies[index]; });
        }
        /**
         * @param {?} name
         * @return {?}
         */
        StrategyIndex.get = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                if (!this.isStrategyRegistered(name))
                    throw Error(InvalidStrategyError);
                /** @type {?} */
                var strategy = StrategyIndex.index[name];
                if (!strategy.isAvailable) {
                    strategy = StrategyIndex.index[StorageStrategies.InMemory];
                }
                return strategy;
            };
        /**
         * @param {?} name
         * @param {?} strategy
         * @return {?}
         */
        StrategyIndex.set = /**
         * @param {?} name
         * @param {?} strategy
         * @return {?}
         */
            function (name, strategy) {
                StrategyIndex.index[name] = strategy;
            };
        /**
         * @param {?=} name
         * @return {?}
         */
        StrategyIndex.clear = /**
         * @param {?=} name
         * @return {?}
         */
            function (name) {
                if (name !== undefined)
                    delete StrategyIndex.index[name];
                else
                    StrategyIndex.index = {};
            };
        /**
         * @param {?} name
         * @return {?}
         */
        StrategyIndex.isStrategyRegistered = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return name in StrategyIndex.index;
            };
        /**
         * @return {?}
         */
        StrategyIndex.hasRegistredStrategies = /**
         * @return {?}
         */
            function () {
                return Object.keys(StrategyIndex.index).length > 0;
            };
        /**
         * @param {?} name
         * @return {?}
         */
        StrategyIndex.prototype.getStrategy = /**
         * @param {?} name
         * @return {?}
         */
            function (name) {
                return StrategyIndex.get(name);
            };
        /**
         * @return {?}
         */
        StrategyIndex.prototype.indexStrategies = /**
         * @return {?}
         */
            function () {
                var _this = this;
                this.strategies.forEach(function (strategy) { return _this.register(strategy.name, strategy); });
            };
        /**
         * @param {?} name
         * @param {?=} overrideIfExists
         * @return {?}
         */
        StrategyIndex.prototype.indexStrategy = /**
         * @param {?} name
         * @param {?=} overrideIfExists
         * @return {?}
         */
            function (name, overrideIfExists) {
                if (overrideIfExists === void 0) {
                    overrideIfExists = false;
                }
                if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists)
                    return StrategyIndex.get(name);
                /** @type {?} */
                var strategy = this.strategies.find(function (strategy) { return strategy.name === name; });
                if (!strategy)
                    throw new Error(InvalidStrategyError);
                this.register(name, strategy, overrideIfExists);
                return strategy;
            };
        /**
         * @param {?} name
         * @param {?} strategy
         * @param {?=} overrideIfExists
         * @return {?}
         */
        StrategyIndex.prototype.register = /**
         * @param {?} name
         * @param {?} strategy
         * @param {?=} overrideIfExists
         * @return {?}
         */
            function (name, strategy, overrideIfExists) {
                if (overrideIfExists === void 0) {
                    overrideIfExists = false;
                }
                if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {
                    StrategyIndex.set(name, strategy);
                    this.registration$.next(name);
                }
            };
        StrategyIndex.index = {};
        StrategyIndex.decorators = [
            { type: i0.Injectable, args: [{ providedIn: 'root' },] }
        ];
        /** @nocollapse */
        StrategyIndex.ctorParameters = function () {
            return [
                { type: Array, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [STORAGE_STRATEGIES,] }] }
            ];
        };
        /** @nocollapse */ StrategyIndex.ngInjectableDef = i0.defineInjectable({ factory: function StrategyIndex_Factory() { return new StrategyIndex(i0.inject(STORAGE_STRATEGIES, 8)); }, token: StrategyIndex, providedIn: "root" });
        return StrategyIndex;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var LocalStorageService = /** @class */ (function (_super) {
        __extends(LocalStorageService, _super);
        function LocalStorageService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return LocalStorageService;
    }(SyncStorage));
    /**
     * @param {?} index
     * @return {?}
     */
    function buildService(index) {
        /** @type {?} */
        var strategy = index.indexStrategy(StorageStrategies.Local);
        return new SyncStorage(strategy);
    }
    /** @type {?} */
    var LocalStorageServiceProvider = {
        provide: LocalStorageService,
        useFactory: buildService,
        deps: [StrategyIndex]
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var SessionStorageService = /** @class */ (function (_super) {
        __extends(SessionStorageService, _super);
        function SessionStorageService() {
            return _super !== null && _super.apply(this, arguments) || this;
        }
        return SessionStorageService;
    }(SyncStorage));
    /**
     * @param {?} index
     * @return {?}
     */
    function buildService$1(index) {
        /** @type {?} */
        var strategy = index.indexStrategy(StorageStrategies.Session);
        return new SyncStorage(strategy);
    }
    /** @type {?} */
    var SessionStorageServiceProvider = {
        provide: SessionStorageService,
        useFactory: buildService$1,
        deps: [StrategyIndex]
    };

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    var DecoratorBuilder = /** @class */ (function () {
        function DecoratorBuilder() {
        }
        /**
         * @param {?} strategyName
         * @param {?} prototype
         * @param {?} propName
         * @param {?=} key
         * @param {?=} defaultValue
         * @return {?}
         */
        DecoratorBuilder.buildSyncStrategyDecorator = /**
         * @param {?} strategyName
         * @param {?} prototype
         * @param {?} propName
         * @param {?=} key
         * @param {?=} defaultValue
         * @return {?}
         */
            function (strategyName, prototype, propName, key, defaultValue) {
                if (defaultValue === void 0) {
                    defaultValue = null;
                }
                /** @type {?} */
                var rawKey = key || propName;
                /** @type {?} */
                var storageKey;
                Object.defineProperty(prototype, propName, {
                    get: function () {
                        /** @type {?} */
                        var value;
                        StrategyIndex.get(strategyName).get(getKey()).subscribe(function (result) { return value = result; });
                        return value === undefined ? defaultValue : value;
                    },
                    set: function (value) {
                        StrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);
                    }
                });
                /**
                 * @return {?}
                 */
                function getKey() {
                    if (storageKey !== undefined)
                        return storageKey;
                    return storageKey = StorageKeyManager.normalize(rawKey);
                }
            };
        return DecoratorBuilder;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /**
     * @param {?=} key
     * @param {?=} defaultValue
     * @return {?}
     */
    function LocalStorage(key, defaultValue) {
        return function (prototype, propName) {
            DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Local, prototype, propName, key, defaultValue);
        };
    }
    /**
     * @param {?=} key
     * @param {?=} defaultValue
     * @return {?}
     */
    function SessionStorage(key, defaultValue) {
        return function (prototype, propName) {
            DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Session, prototype, propName, key, defaultValue);
        };
    }

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var Services = [
        LocalStorageServiceProvider,
        SessionStorageServiceProvider
    ];

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */
    /** @type {?} */
    var LIB_CONFIG = new i0.InjectionToken('ngx_webstorage_config');
    /**
     * @param {?} index
     * @return {?}
     */
    function appInit(index) {
        index.indexStrategies();
        return function () { return StrategyIndex.index; };
    }
    var NgxWebstorageModule = /** @class */ (function () {
        function NgxWebstorageModule(index, config) {
            if (config)
                StorageKeyManager.consumeConfiguration(config);
            else
                console.error('NgxWebstorage : Possible misconfiguration (The forRoot method usage is mandatory since the 3.0.0)');
        }
        /**
         * @param {?=} config
         * @return {?}
         */
        NgxWebstorageModule.forRoot = /**
         * @param {?=} config
         * @return {?}
         */
            function (config) {
                if (config === void 0) {
                    config = {};
                }
                return {
                    ngModule: NgxWebstorageModule,
                    providers: __spread([
                        {
                            provide: LIB_CONFIG,
                            useValue: config,
                        },
                        LocalStorageProvider,
                        SessionStorageProvider
                    ], Services, Strategies, [
                        {
                            provide: i0.APP_INITIALIZER,
                            useFactory: appInit,
                            deps: [StrategyIndex],
                            multi: true
                        }
                    ])
                };
            };
        NgxWebstorageModule.decorators = [
            { type: i0.NgModule, args: [{},] }
        ];
        /** @nocollapse */
        NgxWebstorageModule.ctorParameters = function () {
            return [
                { type: StrategyIndex },
                { type: undefined, decorators: [{ type: i0.Optional }, { type: i0.Inject, args: [LIB_CONFIG,] }] }
            ];
        };
        return NgxWebstorageModule;
    }());

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
     */

    exports.LOCAL_STORAGE = LOCAL_STORAGE;
    exports.SESSION_STORAGE = SESSION_STORAGE;
    exports.STORAGE_STRATEGIES = STORAGE_STRATEGIES;
    exports.LocalStorageService = LocalStorageService;
    exports.SessionStorageService = SessionStorageService;
    exports.StorageStrategies = StorageStrategies;
    exports.SyncStorage = SyncStorage;
    exports.AsyncStorage = AsyncStorage;
    exports.StrategyCacheService = StrategyCacheService;
    exports.LocalStorageStrategy = LocalStorageStrategy;
    exports.SessionStorageStrategy = SessionStorageStrategy;
    exports.InMemoryStorageStrategy = InMemoryStorageStrategy;
    exports.StorageStrategyStubName = StorageStrategyStubName;
    exports.StorageStrategyStub = StorageStrategyStub;
    exports.StorageStub = StorageStub;
    exports.InvalidStrategyError = InvalidStrategyError;
    exports.StrategyIndex = StrategyIndex;
    exports.LocalStorage = LocalStorage;
    exports.SessionStorage = SessionStorage;
    exports.appInit = appInit;
    exports.LIB_CONFIG = LIB_CONFIG;
    exports.NgxWebstorageModule = NgxWebstorageModule;
    exports.ɵb = LocalStorageProvider;
    exports.ɵd = SessionStorageProvider;
    exports.ɵa = getLocalStorage;
    exports.ɵc = getSessionStorage;
    exports.ɵn = Services;
    exports.ɵg = LocalStorageServiceProvider;
    exports.ɵf = buildService;
    exports.ɵi = SessionStorageServiceProvider;
    exports.ɵh = buildService$1;
    exports.ɵl = STORAGE_STRATEGIES;
    exports.ɵj = BaseSyncStorageStrategy;
    exports.ɵe = Strategies;

    Object.defineProperty(exports, '__esModule', { value: true });

})));

//# sourceMappingURL=data:application/json;charset=utf-8;base64,