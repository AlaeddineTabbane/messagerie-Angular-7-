import { distinctUntilChanged, filter, shareReplay, switchMap, map } from 'rxjs/operators';
import { Injectable, InjectionToken, APP_INITIALIZER, Inject, NgModule, Optional, defineInjectable, PLATFORM_ID, NgZone, inject } from '@angular/core';
import { of, Subject } from 'rxjs';
import { isPlatformBrowser } from '@angular/common';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @enum {string} */
const StorageStrategies = {
    Local: 'local_strategy',
    Session: 'session_strategy',
    InMemory: 'in_memory_strategy',
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @return {?}
 */
function noop() { }

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const DefaultPrefix = 'ngx-webstorage';
/** @type {?} */
const DefaultSeparator = '|';
/** @type {?} */
const DefaultIsCaseSensitive = false;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class StorageKeyManager {
    /**
     * @param {?} raw
     * @return {?}
     */
    static normalize(raw) {
        raw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();
        return `${StorageKeyManager.prefix}${StorageKeyManager.separator}${raw}`;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static isNormalizedKey(key) {
        return key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;
    }
    /**
     * @param {?} prefix
     * @return {?}
     */
    static setPrefix(prefix) {
        StorageKeyManager.prefix = prefix;
    }
    /**
     * @param {?} separator
     * @return {?}
     */
    static setSeparator(separator) {
        StorageKeyManager.separator = separator;
    }
    /**
     * @param {?} enable
     * @return {?}
     */
    static setCaseSensitive(enable) {
        StorageKeyManager.isCaseSensitive = enable;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    static consumeConfiguration(config) {
        if ('prefix' in config)
            this.setPrefix(config.prefix);
        if ('separator' in config)
            this.setSeparator(config.separator);
        if ('caseSensitive' in config)
            this.setCaseSensitive(config.caseSensitive);
    }
}
StorageKeyManager.prefix = DefaultPrefix;
StorageKeyManager.separator = DefaultSeparator;
StorageKeyManager.isCaseSensitive = DefaultIsCaseSensitive;

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SyncStorage {
    /**
     * @param {?} strategy
     */
    constructor(strategy) {
        this.strategy = strategy;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    retrieve(key) {
        /** @type {?} */
        let value;
        this.strategy.get(StorageKeyManager.normalize(key)).subscribe((result) => value = typeof result === 'undefined' ? null : result);
        return value;
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    store(key, value) {
        this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);
        return value;
    }
    /**
     * @param {?=} key
     * @return {?}
     */
    clear(key) {
        if (key !== undefined)
            this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);
        else
            this.strategy.clear().subscribe(noop);
    }
    /**
     * @return {?}
     */
    getStrategyName() { return this.strategy.name; }
    /**
     * @param {?} key
     * @return {?}
     */
    observe(key) {
        key = StorageKeyManager.normalize(key);
        return this.strategy.keyChanges.pipe(filter((changed) => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay());
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class AsyncStorage {
    /**
     * @param {?} strategy
     */
    constructor(strategy) {
        this.strategy = strategy;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    retrieve(key) {
        return this.strategy.get(StorageKeyManager.normalize(key)).pipe(map((value) => typeof value === 'undefined' ? null : value));
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    store(key, value) {
        return this.strategy.set(StorageKeyManager.normalize(key), value);
    }
    /**
     * @param {?=} key
     * @return {?}
     */
    clear(key) {
        return key !== undefined ? this.strategy.del(StorageKeyManager.normalize(key)) : this.strategy.clear();
    }
    /**
     * @return {?}
     */
    getStrategyName() { return this.strategy.name; }
    /**
     * @param {?} key
     * @return {?}
     */
    observe(key) {
        key = StorageKeyManager.normalize(key);
        return this.strategy.keyChanges.pipe(filter((changed) => changed === null || changed === key), switchMap(() => this.strategy.get(key)), distinctUntilChanged(), shareReplay());
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class StrategyCacheService {
    constructor() {
        this.caches = {};
    }
    /**
     * @param {?} strategyName
     * @param {?} key
     * @return {?}
     */
    get(strategyName, key) {
        return this.getCacheStore(strategyName)[key];
    }
    /**
     * @param {?} strategyName
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    set(strategyName, key, value) {
        this.getCacheStore(strategyName)[key] = value;
    }
    /**
     * @param {?} strategyName
     * @param {?} key
     * @return {?}
     */
    del(strategyName, key) {
        delete this.getCacheStore(strategyName)[key];
    }
    /**
     * @param {?} strategyName
     * @return {?}
     */
    clear(strategyName) {
        this.caches[strategyName] = (/** @type {?} */ ({}));
    }
    /**
     * @param {?} strategyName
     * @return {?}
     */
    getCacheStore(strategyName) {
        if (strategyName in this.caches)
            return this.caches[strategyName];
        return this.caches[strategyName] = (/** @type {?} */ ({}));
    }
}
StrategyCacheService.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */ StrategyCacheService.ngInjectableDef = defineInjectable({ factory: function StrategyCacheService_Factory() { return new StrategyCacheService(); }, token: StrategyCacheService, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const LOCAL_STORAGE = new InjectionToken('window_local_storage');
/**
 * @return {?}
 */
function getLocalStorage() {
    return (typeof window !== 'undefined') ? window.localStorage : null;
}
/** @type {?} */
const LocalStorageProvider = { provide: LOCAL_STORAGE, useFactory: getLocalStorage };
/** @type {?} */
const SESSION_STORAGE = new InjectionToken('window_session_storage');
/**
 * @return {?}
 */
function getSessionStorage() {
    return (typeof window !== 'undefined') ? window.sessionStorage : null;
}
/** @type {?} */
const SessionStorageProvider = { provide: SESSION_STORAGE, useFactory: getSessionStorage };

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class CompatHelper {
    /**
     * @param {?} storage
     * @return {?}
     */
    static isStorageAvailable(storage) {
        /** @type {?} */
        let available = true;
        try {
            if (typeof storage === 'object') {
                storage.setItem('test-storage', 'foobar');
                storage.removeItem('test-storage');
            }
            else
                available = false;
        }
        catch (e) {
            available = false;
        }
        return available;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @abstract
 */
class BaseSyncStorageStrategy {
    /**
     * @param {?} storage
     * @param {?} cache
     */
    constructor(storage, cache) {
        this.storage = storage;
        this.cache = cache;
        this.keyChanges = new Subject();
    }
    /**
     * @return {?}
     */
    get isAvailable() {
        if (this._isAvailable === undefined)
            this._isAvailable = CompatHelper.isStorageAvailable(this.storage);
        return this._isAvailable;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    get(key) {
        /** @type {?} */
        let data = this.cache.get(this.name, key);
        if (data !== undefined)
            return of(data);
        try {
            /** @type {?} */
            const item = this.storage.getItem(key);
            if (item !== null) {
                data = JSON.parse(item);
                this.cache.set(this.name, key, data);
            }
        }
        catch (err) {
            console.warn(err);
        }
        return of(data);
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    set(key, value) {
        /** @type {?} */
        const data = JSON.stringify(value);
        this.storage.setItem(key, data);
        this.cache.set(this.name, key, value);
        this.keyChanges.next(key);
        return of(value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    del(key) {
        this.storage.removeItem(key);
        this.cache.del(this.name, key);
        this.keyChanges.next(key);
        return of(null);
    }
    /**
     * @return {?}
     */
    clear() {
        this.storage.clear();
        this.cache.clear(this.name);
        this.keyChanges.next(null);
        return of(null);
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class LocalStorageStrategy extends BaseSyncStorageStrategy {
    /**
     * @param {?} storage
     * @param {?} cache
     * @param {?} platformId
     * @param {?} zone
     */
    constructor(storage, cache, platformId, zone) {
        super(storage, cache);
        this.storage = storage;
        this.cache = cache;
        this.platformId = platformId;
        this.zone = zone;
        this.name = LocalStorageStrategy.strategyName;
        if (isPlatformBrowser(this.platformId))
            this.listenExternalChanges();
    }
    /**
     * @return {?}
     */
    listenExternalChanges() {
        window.addEventListener('storage', (event) => this.zone.run(() => {
            if (event.storageArea !== this.storage)
                return;
            /** @type {?} */
            const key = event.key;
            if (key !== null)
                this.cache.del(this.name, event.key);
            else
                this.cache.clear(this.name);
            this.keyChanges.next(key);
        }));
    }
}
LocalStorageStrategy.strategyName = StorageStrategies.Local;
/** @nocollapse */
LocalStorageStrategy.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [LOCAL_STORAGE,] }] },
    { type: StrategyCacheService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SessionStorageStrategy extends BaseSyncStorageStrategy {
    /**
     * @param {?} storage
     * @param {?} cache
     * @param {?} platformId
     * @param {?} zone
     */
    constructor(storage, cache, platformId, zone) {
        super(storage, cache);
        this.storage = storage;
        this.cache = cache;
        this.platformId = platformId;
        this.zone = zone;
        this.name = SessionStorageStrategy.strategyName;
        if (isPlatformBrowser(this.platformId))
            this.listenExternalChanges();
    }
    /**
     * @return {?}
     */
    listenExternalChanges() {
        window.addEventListener('storage', (event) => this.zone.run(() => {
            if (event.storageArea !== this.storage)
                return;
            /** @type {?} */
            const key = event.key;
            if (event.key !== null)
                this.cache.del(this.name, event.key);
            else
                this.cache.clear(this.name);
            this.keyChanges.next(key);
        }));
    }
}
SessionStorageStrategy.strategyName = StorageStrategies.Session;
/** @nocollapse */
SessionStorageStrategy.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [SESSION_STORAGE,] }] },
    { type: StrategyCacheService },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] },
    { type: NgZone }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class InMemoryStorageStrategy {
    /**
     * @param {?} cache
     */
    constructor(cache) {
        this.cache = cache;
        this.keyChanges = new Subject();
        this.isAvailable = true;
        this.name = InMemoryStorageStrategy.strategyName;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    get(key) {
        return of(this.cache.get(this.name, key));
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    set(key, value) {
        this.cache.set(this.name, key, value);
        this.keyChanges.next(key);
        return of(value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    del(key) {
        this.cache.del(this.name, key);
        this.keyChanges.next(key);
        return of(null);
    }
    /**
     * @return {?}
     */
    clear() {
        this.cache.clear(this.name);
        this.keyChanges.next(null);
        return of(null);
    }
}
InMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;
/** @nocollapse */
InMemoryStorageStrategy.ctorParameters = () => [
    { type: StrategyCacheService, decorators: [{ type: Inject, args: [StrategyCacheService,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const STORAGE_STRATEGIES = new InjectionToken('STORAGE_STRATEGIES');
/** @type {?} */
const Strategies = [
    { provide: STORAGE_STRATEGIES, useClass: InMemoryStorageStrategy, multi: true },
    { provide: STORAGE_STRATEGIES, useClass: LocalStorageStrategy, multi: true },
    { provide: STORAGE_STRATEGIES, useClass: SessionStorageStrategy, multi: true },
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const StorageStrategyStubName = 'stub_strategy';
class StorageStrategyStub {
    /**
     * @param {?=} name
     */
    constructor(name) {
        this.keyChanges = new Subject();
        this.store = {};
        this._available = true;
        this.name = name || StorageStrategyStubName;
    }
    /**
     * @return {?}
     */
    get isAvailable() {
        return this._available;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    get(key) {
        return of(this.store[key]);
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    set(key, value) {
        this.store[key] = value;
        this.keyChanges.next(key);
        return of(value);
    }
    /**
     * @param {?} key
     * @return {?}
     */
    del(key) {
        delete this.store[key];
        this.keyChanges.next(key);
        return of(null);
    }
    /**
     * @return {?}
     */
    clear() {
        this.store = {};
        this.keyChanges.next(null);
        return of(null);
    }
}
/** @nocollapse */
StorageStrategyStub.ctorParameters = () => [
    { type: String, decorators: [{ type: Optional }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class StorageStub {
    constructor() {
        this.store = {};
    }
    /**
     * @return {?}
     */
    get length() {
        return Object.keys(this.store).length;
    }
    /**
     * @return {?}
     */
    clear() {
        this.store = {};
    }
    /**
     * @param {?} key
     * @return {?}
     */
    getItem(key) {
        return this.store[key] || null;
    }
    /**
     * @param {?} index
     * @return {?}
     */
    key(index) {
        return Object.keys(this.store)[index];
    }
    /**
     * @param {?} key
     * @return {?}
     */
    removeItem(key) {
        delete this.store[key];
    }
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    setItem(key, value) {
        this.store[key] = value;
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const InvalidStrategyError = 'invalid_strategy';
class StrategyIndex {
    /**
     * @param {?} strategies
     */
    constructor(strategies) {
        this.strategies = strategies;
        this.registration$ = new Subject();
        if (!strategies)
            strategies = [];
        this.strategies = strategies.reverse()
            .map((strategy, index, arr) => strategy.name)
            .map((name, index, arr) => arr.indexOf(name) === index ? index : null)
            .filter((index) => index !== null)
            .map((index) => strategies[index]);
    }
    /**
     * @param {?} name
     * @return {?}
     */
    static get(name) {
        if (!this.isStrategyRegistered(name))
            throw Error(InvalidStrategyError);
        /** @type {?} */
        let strategy = StrategyIndex.index[name];
        if (!strategy.isAvailable) {
            strategy = StrategyIndex.index[StorageStrategies.InMemory];
        }
        return strategy;
    }
    /**
     * @param {?} name
     * @param {?} strategy
     * @return {?}
     */
    static set(name, strategy) {
        StrategyIndex.index[name] = strategy;
    }
    /**
     * @param {?=} name
     * @return {?}
     */
    static clear(name) {
        if (name !== undefined)
            delete StrategyIndex.index[name];
        else
            StrategyIndex.index = {};
    }
    /**
     * @param {?} name
     * @return {?}
     */
    static isStrategyRegistered(name) {
        return name in StrategyIndex.index;
    }
    /**
     * @return {?}
     */
    static hasRegistredStrategies() {
        return Object.keys(StrategyIndex.index).length > 0;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getStrategy(name) {
        return StrategyIndex.get(name);
    }
    /**
     * @return {?}
     */
    indexStrategies() {
        this.strategies.forEach((strategy) => this.register(strategy.name, strategy));
    }
    /**
     * @param {?} name
     * @param {?=} overrideIfExists
     * @return {?}
     */
    indexStrategy(name, overrideIfExists = false) {
        if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists)
            return StrategyIndex.get(name);
        /** @type {?} */
        const strategy = this.strategies.find((strategy) => strategy.name === name);
        if (!strategy)
            throw new Error(InvalidStrategyError);
        this.register(name, strategy, overrideIfExists);
        return strategy;
    }
    /**
     * @param {?} name
     * @param {?} strategy
     * @param {?=} overrideIfExists
     * @return {?}
     */
    register(name, strategy, overrideIfExists = false) {
        if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {
            StrategyIndex.set(name, strategy);
            this.registration$.next(name);
        }
    }
}
StrategyIndex.index = {};
StrategyIndex.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
StrategyIndex.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [STORAGE_STRATEGIES,] }] }
];
/** @nocollapse */ StrategyIndex.ngInjectableDef = defineInjectable({ factory: function StrategyIndex_Factory() { return new StrategyIndex(inject(STORAGE_STRATEGIES, 8)); }, token: StrategyIndex, providedIn: "root" });

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class LocalStorageService extends SyncStorage {
}
/**
 * @param {?} index
 * @return {?}
 */
function buildService(index) {
    /** @type {?} */
    const strategy = index.indexStrategy(StorageStrategies.Local);
    return new SyncStorage(strategy);
}
/** @type {?} */
const LocalStorageServiceProvider = {
    provide: LocalStorageService,
    useFactory: buildService,
    deps: [StrategyIndex]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class SessionStorageService extends SyncStorage {
}
/**
 * @param {?} index
 * @return {?}
 */
function buildService$1(index) {
    /** @type {?} */
    const strategy = index.indexStrategy(StorageStrategies.Session);
    return new SyncStorage(strategy);
}
/** @type {?} */
const SessionStorageServiceProvider = {
    provide: SessionStorageService,
    useFactory: buildService$1,
    deps: [StrategyIndex]
};

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
class DecoratorBuilder {
    /**
     * @param {?} strategyName
     * @param {?} prototype
     * @param {?} propName
     * @param {?=} key
     * @param {?=} defaultValue
     * @return {?}
     */
    static buildSyncStrategyDecorator(strategyName, prototype, propName, key, defaultValue = null) {
        /** @type {?} */
        const rawKey = key || propName;
        /** @type {?} */
        let storageKey;
        Object.defineProperty(prototype, propName, {
            get: function () {
                /** @type {?} */
                let value;
                StrategyIndex.get(strategyName).get(getKey()).subscribe((result) => value = result);
                return value === undefined ? defaultValue : value;
            },
            set: function (value) {
                StrategyIndex.get(strategyName).set(getKey(), value).subscribe(noop);
            }
        });
        /**
         * @return {?}
         */
        function getKey() {
            if (storageKey !== undefined)
                return storageKey;
            return storageKey = StorageKeyManager.normalize(rawKey);
        }
    }
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @param {?=} key
 * @param {?=} defaultValue
 * @return {?}
 */
function LocalStorage(key, defaultValue) {
    return function (prototype, propName) {
        DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Local, prototype, propName, key, defaultValue);
    };
}
/**
 * @param {?=} key
 * @param {?=} defaultValue
 * @return {?}
 */
function SessionStorage(key, defaultValue) {
    return function (prototype, propName) {
        DecoratorBuilder.buildSyncStrategyDecorator(StorageStrategies.Session, prototype, propName, key, defaultValue);
    };
}

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const Services = [
    LocalStorageServiceProvider,
    SessionStorageServiceProvider
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/** @type {?} */
const LIB_CONFIG = new InjectionToken('ngx_webstorage_config');
/**
 * @param {?} index
 * @return {?}
 */
function appInit(index) {
    index.indexStrategies();
    return () => StrategyIndex.index;
}
class NgxWebstorageModule {
    /**
     * @param {?} index
     * @param {?} config
     */
    constructor(index, config) {
        if (config)
            StorageKeyManager.consumeConfiguration(config);
        else
            console.error('NgxWebstorage : Possible misconfiguration (The forRoot method usage is mandatory since the 3.0.0)');
    }
    /**
     * @param {?=} config
     * @return {?}
     */
    static forRoot(config = {}) {
        return {
            ngModule: NgxWebstorageModule,
            providers: [
                {
                    provide: LIB_CONFIG,
                    useValue: config,
                },
                LocalStorageProvider,
                SessionStorageProvider,
                ...Services,
                ...Strategies,
                {
                    provide: APP_INITIALIZER,
                    useFactory: appInit,
                    deps: [StrategyIndex],
                    multi: true
                }
            ]
        };
    }
}
NgxWebstorageModule.decorators = [
    { type: NgModule, args: [{},] }
];
/** @nocollapse */
NgxWebstorageModule.ctorParameters = () => [
    { type: StrategyIndex },
    { type: undefined, decorators: [{ type: Optional }, { type: Inject, args: [LIB_CONFIG,] }] }
];

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */

export { LOCAL_STORAGE, SESSION_STORAGE, STORAGE_STRATEGIES, LocalStorageService, SessionStorageService, StorageStrategies, SyncStorage, AsyncStorage, StrategyCacheService, LocalStorageStrategy, SessionStorageStrategy, InMemoryStorageStrategy, StorageStrategyStubName, StorageStrategyStub, StorageStub, InvalidStrategyError, StrategyIndex, LocalStorage, SessionStorage, appInit, LIB_CONFIG, NgxWebstorageModule, LocalStorageProvider as ɵb, SessionStorageProvider as ɵd, getLocalStorage as ɵa, getSessionStorage as ɵc, Services as ɵn, LocalStorageServiceProvider as ɵg, buildService as ɵf, SessionStorageServiceProvider as ɵi, buildService$1 as ɵh, STORAGE_STRATEGIES as ɵl, BaseSyncStorageStrategy as ɵj, Strategies as ɵe };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,