/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { DefaultIsCaseSensitive, DefaultPrefix, DefaultSeparator } from '../constants/config';
export class StorageKeyManager {
    /**
     * @param {?} raw
     * @return {?}
     */
    static normalize(raw) {
        raw = StorageKeyManager.isCaseSensitive ? raw : raw.toLowerCase();
        return `${StorageKeyManager.prefix}${StorageKeyManager.separator}${raw}`;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    static isNormalizedKey(key) {
        return key.indexOf(StorageKeyManager.prefix + StorageKeyManager.separator) === 0;
    }
    /**
     * @param {?} prefix
     * @return {?}
     */
    static setPrefix(prefix) {
        StorageKeyManager.prefix = prefix;
    }
    /**
     * @param {?} separator
     * @return {?}
     */
    static setSeparator(separator) {
        StorageKeyManager.separator = separator;
    }
    /**
     * @param {?} enable
     * @return {?}
     */
    static setCaseSensitive(enable) {
        StorageKeyManager.isCaseSensitive = enable;
    }
    /**
     * @param {?} config
     * @return {?}
     */
    static consumeConfiguration(config) {
        if ('prefix' in config)
            this.setPrefix(config.prefix);
        if ('separator' in config)
            this.setSeparator(config.separator);
        if ('caseSensitive' in config)
            this.setCaseSensitive(config.caseSensitive);
    }
}
StorageKeyManager.prefix = DefaultPrefix;
StorageKeyManager.separator = DefaultSeparator;
StorageKeyManager.isCaseSensitive = DefaultIsCaseSensitive;
if (false) {
    /** @type {?} */
    StorageKeyManager.prefix;
    /** @type {?} */
    StorageKeyManager.separator;
    /** @type {?} */
    StorageKeyManager.isCaseSensitive;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RvcmFnZUtleU1hbmFnZXIuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtd2Vic3RvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9oZWxwZXJzL3N0b3JhZ2VLZXlNYW5hZ2VyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFBQSxPQUFPLEVBQUMsc0JBQXNCLEVBQUUsYUFBYSxFQUFFLGdCQUFnQixFQUFDLE1BQU0scUJBQXFCLENBQUM7QUFHNUYsTUFBTSxPQUFPLGlCQUFpQjs7Ozs7SUFNN0IsTUFBTSxDQUFDLFNBQVMsQ0FBQyxHQUFXO1FBQzNCLEdBQUcsR0FBRyxpQkFBaUIsQ0FBQyxlQUFlLENBQUMsQ0FBQyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsR0FBRyxDQUFDLFdBQVcsRUFBRSxDQUFDO1FBQ2xFLE9BQU8sR0FBRyxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsaUJBQWlCLENBQUMsU0FBUyxHQUFHLEdBQUcsRUFBRSxDQUFDO0lBQzFFLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLGVBQWUsQ0FBQyxHQUFXO1FBQ2pDLE9BQU8sR0FBRyxDQUFDLE9BQU8sQ0FBQyxpQkFBaUIsQ0FBQyxNQUFNLEdBQUcsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxDQUFDO0lBQ2xGLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLFNBQVMsQ0FBQyxNQUFjO1FBQzlCLGlCQUFpQixDQUFDLE1BQU0sR0FBRyxNQUFNLENBQUM7SUFDbkMsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsWUFBWSxDQUFDLFNBQWlCO1FBQ3BDLGlCQUFpQixDQUFDLFNBQVMsR0FBRyxTQUFTLENBQUM7SUFDekMsQ0FBQzs7Ozs7SUFFRCxNQUFNLENBQUMsZ0JBQWdCLENBQUMsTUFBZTtRQUN0QyxpQkFBaUIsQ0FBQyxlQUFlLEdBQUcsTUFBTSxDQUFDO0lBQzVDLENBQUM7Ozs7O0lBRUQsTUFBTSxDQUFDLG9CQUFvQixDQUFDLE1BQWtDO1FBQzdELElBQUksUUFBUSxJQUFJLE1BQU07WUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLE1BQU0sQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN0RCxJQUFJLFdBQVcsSUFBSSxNQUFNO1lBQUUsSUFBSSxDQUFDLFlBQVksQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLENBQUM7UUFDL0QsSUFBSSxlQUFlLElBQUksTUFBTTtZQUFFLElBQUksQ0FBQyxnQkFBZ0IsQ0FBQyxNQUFNLENBQUMsYUFBYSxDQUFDLENBQUM7SUFDNUUsQ0FBQzs7QUE3Qk0sd0JBQU0sR0FBRyxhQUFhLENBQUM7QUFDdkIsMkJBQVMsR0FBRyxnQkFBZ0IsQ0FBQztBQUM3QixpQ0FBZSxHQUFHLHNCQUFzQixDQUFDOzs7SUFGaEQseUJBQThCOztJQUM5Qiw0QkFBb0M7O0lBQ3BDLGtDQUFnRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7RGVmYXVsdElzQ2FzZVNlbnNpdGl2ZSwgRGVmYXVsdFByZWZpeCwgRGVmYXVsdFNlcGFyYXRvcn0gZnJvbSAnLi4vY29uc3RhbnRzL2NvbmZpZyc7XHJcbmltcG9ydCB7Tmd4V2Vic3RvcmFnZUNvbmZpZ3VyYXRpb259IGZyb20gJy4uL2NvbmZpZyc7XHJcblxyXG5leHBvcnQgY2xhc3MgU3RvcmFnZUtleU1hbmFnZXIge1xyXG5cdFxyXG5cdHN0YXRpYyBwcmVmaXggPSBEZWZhdWx0UHJlZml4O1xyXG5cdHN0YXRpYyBzZXBhcmF0b3IgPSBEZWZhdWx0U2VwYXJhdG9yO1xyXG5cdHN0YXRpYyBpc0Nhc2VTZW5zaXRpdmUgPSBEZWZhdWx0SXNDYXNlU2Vuc2l0aXZlO1xyXG5cdFxyXG5cdHN0YXRpYyBub3JtYWxpemUocmF3OiBzdHJpbmcpIHtcclxuXHRcdHJhdyA9IFN0b3JhZ2VLZXlNYW5hZ2VyLmlzQ2FzZVNlbnNpdGl2ZSA/IHJhdyA6IHJhdy50b0xvd2VyQ2FzZSgpO1xyXG5cdFx0cmV0dXJuIGAke1N0b3JhZ2VLZXlNYW5hZ2VyLnByZWZpeH0ke1N0b3JhZ2VLZXlNYW5hZ2VyLnNlcGFyYXRvcn0ke3Jhd31gO1xyXG5cdH1cclxuXHRcclxuXHRzdGF0aWMgaXNOb3JtYWxpemVkS2V5KGtleTogc3RyaW5nKSB7XHJcblx0XHRyZXR1cm4ga2V5LmluZGV4T2YoU3RvcmFnZUtleU1hbmFnZXIucHJlZml4ICsgU3RvcmFnZUtleU1hbmFnZXIuc2VwYXJhdG9yKSA9PT0gMDtcclxuXHR9XHJcblx0XHJcblx0c3RhdGljIHNldFByZWZpeChwcmVmaXg6IHN0cmluZykge1xyXG5cdFx0U3RvcmFnZUtleU1hbmFnZXIucHJlZml4ID0gcHJlZml4O1xyXG5cdH1cclxuXHRcclxuXHRzdGF0aWMgc2V0U2VwYXJhdG9yKHNlcGFyYXRvcjogc3RyaW5nKSB7XHJcblx0XHRTdG9yYWdlS2V5TWFuYWdlci5zZXBhcmF0b3IgPSBzZXBhcmF0b3I7XHJcblx0fVxyXG5cdFxyXG5cdHN0YXRpYyBzZXRDYXNlU2Vuc2l0aXZlKGVuYWJsZTogYm9vbGVhbikge1xyXG5cdFx0U3RvcmFnZUtleU1hbmFnZXIuaXNDYXNlU2Vuc2l0aXZlID0gZW5hYmxlO1xyXG5cdH1cclxuXHRcclxuXHRzdGF0aWMgY29uc3VtZUNvbmZpZ3VyYXRpb24oY29uZmlnOiBOZ3hXZWJzdG9yYWdlQ29uZmlndXJhdGlvbikge1xyXG5cdFx0aWYgKCdwcmVmaXgnIGluIGNvbmZpZykgdGhpcy5zZXRQcmVmaXgoY29uZmlnLnByZWZpeCk7XHJcblx0XHRpZiAoJ3NlcGFyYXRvcicgaW4gY29uZmlnKSB0aGlzLnNldFNlcGFyYXRvcihjb25maWcuc2VwYXJhdG9yKTtcclxuXHRcdGlmICgnY2FzZVNlbnNpdGl2ZScgaW4gY29uZmlnKSB0aGlzLnNldENhc2VTZW5zaXRpdmUoY29uZmlnLmNhc2VTZW5zaXRpdmUpO1xyXG5cdH1cclxufVxyXG4iXX0=