/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { of, Subject } from 'rxjs';
import { StrategyCacheService } from '../core/strategyCache';
import { StorageStrategies } from '../constants/strategy';
import { Inject } from '@angular/core';
var InMemoryStorageStrategy = /** @class */ (function () {
    function InMemoryStorageStrategy(cache) {
        this.cache = cache;
        this.keyChanges = new Subject();
        this.isAvailable = true;
        this.name = InMemoryStorageStrategy.strategyName;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    InMemoryStorageStrategy.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        return of(this.cache.get(this.name, key));
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    InMemoryStorageStrategy.prototype.set = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.cache.set(this.name, key, value);
        this.keyChanges.next(key);
        return of(value);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    InMemoryStorageStrategy.prototype.del = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        this.cache.del(this.name, key);
        this.keyChanges.next(key);
        return of(null);
    };
    /**
     * @return {?}
     */
    InMemoryStorageStrategy.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.cache.clear(this.name);
        this.keyChanges.next(null);
        return of(null);
    };
    InMemoryStorageStrategy.strategyName = StorageStrategies.InMemory;
    /** @nocollapse */
    InMemoryStorageStrategy.ctorParameters = function () { return [
        { type: StrategyCacheService, decorators: [{ type: Inject, args: [StrategyCacheService,] }] }
    ]; };
    return InMemoryStorageStrategy;
}());
export { InMemoryStorageStrategy };
if (false) {
    /** @type {?} */
    InMemoryStorageStrategy.strategyName;
    /** @type {?} */
    InMemoryStorageStrategy.prototype.keyChanges;
    /** @type {?} */
    InMemoryStorageStrategy.prototype.isAvailable;
    /** @type {?} */
    InMemoryStorageStrategy.prototype.name;
    /** @type {?} */
    InMemoryStorageStrategy.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5NZW1vcnkuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtd2Vic3RvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9zdHJhdGVnaWVzL2luTWVtb3J5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQWEsRUFBRSxFQUFFLE9BQU8sRUFBQyxNQUFNLE1BQU0sQ0FBQztBQUM3QyxPQUFPLEVBQUMsb0JBQW9CLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUMzRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQztBQUN4RCxPQUFPLEVBQUMsTUFBTSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBRXJDO0lBTUMsaUNBQW9ELEtBQTJCO1FBQTNCLFVBQUssR0FBTCxLQUFLLENBQXNCO1FBSnRFLGVBQVUsR0FBb0IsSUFBSSxPQUFPLEVBQUUsQ0FBQztRQUNyRCxnQkFBVyxHQUFZLElBQUksQ0FBQztRQUNuQixTQUFJLEdBQVcsdUJBQXVCLENBQUMsWUFBWSxDQUFDO0lBRXFCLENBQUM7Ozs7O0lBRW5GLHFDQUFHOzs7O0lBQUgsVUFBSSxHQUFXO1FBQ2QsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUMsQ0FBQyxDQUFDO0lBQzNDLENBQUM7Ozs7OztJQUVELHFDQUFHOzs7OztJQUFILFVBQUksR0FBVyxFQUFFLEtBQVU7UUFDMUIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEIsQ0FBQzs7Ozs7SUFFRCxxQ0FBRzs7OztJQUFILFVBQUksR0FBVztRQUNkLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakIsQ0FBQzs7OztJQUVELHVDQUFLOzs7SUFBTDtRQUNDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUM1QixJQUFJLENBQUMsVUFBVSxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztRQUMzQixPQUFPLEVBQUUsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUNqQixDQUFDO0lBM0JlLG9DQUFZLEdBQVcsaUJBQWlCLENBQUMsUUFBUSxDQUFDOzs7Z0JBTDNELG9CQUFvQix1QkFVZCxNQUFNLFNBQUMsb0JBQW9COztJQXdCekMsOEJBQUM7Q0FBQSxBQTlCRCxJQThCQztTQTlCWSx1QkFBdUI7OztJQUNuQyxxQ0FBa0U7O0lBQ2xFLDZDQUFxRDs7SUFDckQsOENBQTRCOztJQUM1Qix1Q0FBNkQ7O0lBRWpELHdDQUFtRSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RvcmFnZVN0cmF0ZWd5fSBmcm9tICcuLi9jb3JlL2ludGVyZmFjZXMvc3RvcmFnZVN0cmF0ZWd5JztcclxuaW1wb3J0IHtPYnNlcnZhYmxlLCBvZiwgU3ViamVjdH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7U3RyYXRlZ3lDYWNoZVNlcnZpY2V9IGZyb20gJy4uL2NvcmUvc3RyYXRlZ3lDYWNoZSc7XHJcbmltcG9ydCB7U3RvcmFnZVN0cmF0ZWdpZXN9IGZyb20gJy4uL2NvbnN0YW50cy9zdHJhdGVneSc7XHJcbmltcG9ydCB7SW5qZWN0fSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuXHJcbmV4cG9ydCBjbGFzcyBJbk1lbW9yeVN0b3JhZ2VTdHJhdGVneSBpbXBsZW1lbnRzIFN0b3JhZ2VTdHJhdGVneTxhbnk+IHtcclxuXHRzdGF0aWMgcmVhZG9ubHkgc3RyYXRlZ3lOYW1lOiBzdHJpbmcgPSBTdG9yYWdlU3RyYXRlZ2llcy5Jbk1lbW9yeTtcclxuXHRyZWFkb25seSBrZXlDaGFuZ2VzOiBTdWJqZWN0PHN0cmluZz4gPSBuZXcgU3ViamVjdCgpO1xyXG5cdGlzQXZhaWxhYmxlOiBib29sZWFuID0gdHJ1ZTtcclxuXHRyZWFkb25seSBuYW1lOiBzdHJpbmcgPSBJbk1lbW9yeVN0b3JhZ2VTdHJhdGVneS5zdHJhdGVneU5hbWU7XHJcblxyXG5cdGNvbnN0cnVjdG9yKEBJbmplY3QoU3RyYXRlZ3lDYWNoZVNlcnZpY2UpIHByb3RlY3RlZCBjYWNoZTogU3RyYXRlZ3lDYWNoZVNlcnZpY2UpIHt9XHJcblxyXG5cdGdldChrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcblx0XHRyZXR1cm4gb2YodGhpcy5jYWNoZS5nZXQodGhpcy5uYW1lLCBrZXkpKTtcclxuXHR9XHJcblxyXG5cdHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcblx0XHR0aGlzLmNhY2hlLnNldCh0aGlzLm5hbWUsIGtleSwgdmFsdWUpO1xyXG5cdFx0dGhpcy5rZXlDaGFuZ2VzLm5leHQoa2V5KTtcclxuXHRcdHJldHVybiBvZih2YWx1ZSk7XHJcblx0fVxyXG5cclxuXHRkZWwoa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuXHRcdHRoaXMuY2FjaGUuZGVsKHRoaXMubmFtZSwga2V5KTtcclxuXHRcdHRoaXMua2V5Q2hhbmdlcy5uZXh0KGtleSk7XHJcblx0XHRyZXR1cm4gb2YobnVsbCk7XHJcblx0fVxyXG5cclxuXHRjbGVhcigpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuXHRcdHRoaXMuY2FjaGUuY2xlYXIodGhpcy5uYW1lKTtcclxuXHRcdHRoaXMua2V5Q2hhbmdlcy5uZXh0KG51bGwpO1xyXG5cdFx0cmV0dXJuIG9mKG51bGwpO1xyXG5cdH1cclxuXHJcbn1cclxuIl19