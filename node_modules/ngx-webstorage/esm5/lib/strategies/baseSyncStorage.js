/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { of, Subject } from 'rxjs';
import { CompatHelper } from '../helpers/compat';
/**
 * @abstract
 */
var /**
 * @abstract
 */
BaseSyncStorageStrategy = /** @class */ (function () {
    function BaseSyncStorageStrategy(storage, cache) {
        this.storage = storage;
        this.cache = cache;
        this.keyChanges = new Subject();
    }
    Object.defineProperty(BaseSyncStorageStrategy.prototype, "isAvailable", {
        get: /**
         * @return {?}
         */
        function () {
            if (this._isAvailable === undefined)
                this._isAvailable = CompatHelper.isStorageAvailable(this.storage);
            return this._isAvailable;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * @param {?} key
     * @return {?}
     */
    BaseSyncStorageStrategy.prototype.get = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var data = this.cache.get(this.name, key);
        if (data !== undefined)
            return of(data);
        try {
            /** @type {?} */
            var item = this.storage.getItem(key);
            if (item !== null) {
                data = JSON.parse(item);
                this.cache.set(this.name, key, data);
            }
        }
        catch (err) {
            console.warn(err);
        }
        return of(data);
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    BaseSyncStorageStrategy.prototype.set = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        /** @type {?} */
        var data = JSON.stringify(value);
        this.storage.setItem(key, data);
        this.cache.set(this.name, key, value);
        this.keyChanges.next(key);
        return of(value);
    };
    /**
     * @param {?} key
     * @return {?}
     */
    BaseSyncStorageStrategy.prototype.del = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        this.storage.removeItem(key);
        this.cache.del(this.name, key);
        this.keyChanges.next(key);
        return of(null);
    };
    /**
     * @return {?}
     */
    BaseSyncStorageStrategy.prototype.clear = /**
     * @return {?}
     */
    function () {
        this.storage.clear();
        this.cache.clear(this.name);
        this.keyChanges.next(null);
        return of(null);
    };
    return BaseSyncStorageStrategy;
}());
/**
 * @abstract
 */
export { BaseSyncStorageStrategy };
if (false) {
    /** @type {?} */
    BaseSyncStorageStrategy.prototype.keyChanges;
    /** @type {?} */
    BaseSyncStorageStrategy.prototype._isAvailable;
    /** @type {?} */
    BaseSyncStorageStrategy.prototype.name;
    /** @type {?} */
    BaseSyncStorageStrategy.prototype.storage;
    /** @type {?} */
    BaseSyncStorageStrategy.prototype.cache;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYmFzZVN5bmNTdG9yYWdlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LXdlYnN0b3JhZ2UvIiwic291cmNlcyI6WyJsaWIvc3RyYXRlZ2llcy9iYXNlU3luY1N0b3JhZ2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBYSxFQUFFLEVBQUUsT0FBTyxFQUFDLE1BQU0sTUFBTSxDQUFDO0FBRTdDLE9BQU8sRUFBQyxZQUFZLEVBQUMsTUFBTSxtQkFBbUIsQ0FBQzs7OztBQUcvQzs7OztJQUdDLGlDQUFzQixPQUFtQixFQUFZLEtBQTJCO1FBQTFELFlBQU8sR0FBUCxPQUFPLENBQVk7UUFBWSxVQUFLLEdBQUwsS0FBSyxDQUFzQjtRQUZ2RSxlQUFVLEdBQW9CLElBQUksT0FBTyxFQUFFLENBQUM7SUFFOEIsQ0FBQztJQUlwRixzQkFBSSxnREFBVzs7OztRQUFmO1lBQ0MsSUFBSSxJQUFJLENBQUMsWUFBWSxLQUFLLFNBQVM7Z0JBQUUsSUFBSSxDQUFDLFlBQVksR0FBRyxZQUFZLENBQUMsa0JBQWtCLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3ZHLE9BQU8sSUFBSSxDQUFDLFlBQVksQ0FBQztRQUMxQixDQUFDOzs7T0FBQTs7Ozs7SUFJRCxxQ0FBRzs7OztJQUFILFVBQUksR0FBVzs7WUFDVixJQUFJLEdBQVEsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLENBQUM7UUFDOUMsSUFBSSxJQUFJLEtBQUssU0FBUztZQUFFLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBRXhDLElBQUk7O2dCQUNHLElBQUksR0FBUSxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUM7WUFDM0MsSUFBSSxJQUFJLEtBQUssSUFBSSxFQUFFO2dCQUNsQixJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztnQkFDeEIsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7YUFDckM7U0FDRDtRQUFDLE9BQU0sR0FBRyxFQUFFO1lBQ1osT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztTQUNsQjtRQUVELE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLENBQUM7Ozs7OztJQUVELHFDQUFHOzs7OztJQUFILFVBQUksR0FBVyxFQUFFLEtBQVU7O1lBQ3BCLElBQUksR0FBVyxJQUFJLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQztRQUMxQyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFDaEMsSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDdEMsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsT0FBTyxFQUFFLENBQUMsS0FBSyxDQUFDLENBQUM7SUFDbEIsQ0FBQzs7Ozs7SUFFRCxxQ0FBRzs7OztJQUFILFVBQUksR0FBVztRQUNkLElBQUksQ0FBQyxPQUFPLENBQUMsVUFBVSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDL0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDMUIsT0FBTyxFQUFFLENBQUMsSUFBSSxDQUFDLENBQUM7SUFDakIsQ0FBQzs7OztJQUVELHVDQUFLOzs7SUFBTDtRQUNDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLENBQUM7UUFDckIsSUFBSSxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzVCLElBQUksQ0FBQyxVQUFVLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzNCLE9BQU8sRUFBRSxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ2pCLENBQUM7SUFFRiw4QkFBQztBQUFELENBQUMsQUFyREQsSUFxREM7Ozs7Ozs7SUFwREEsNkNBQXFEOztJQUlyRCwrQ0FBZ0M7O0lBT2hDLHVDQUErQjs7SUFUbkIsMENBQTZCOztJQUFFLHdDQUFxQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RvcmFnZVN0cmF0ZWd5fSBmcm9tICcuLi9jb3JlL2ludGVyZmFjZXMvc3RvcmFnZVN0cmF0ZWd5JztcclxuaW1wb3J0IHtPYnNlcnZhYmxlLCBvZiwgU3ViamVjdH0gZnJvbSAncnhqcyc7XHJcbmltcG9ydCB7U3RyYXRlZ3lDYWNoZVNlcnZpY2V9IGZyb20gJy4uL2NvcmUvc3RyYXRlZ3lDYWNoZSc7XHJcbmltcG9ydCB7Q29tcGF0SGVscGVyfSBmcm9tICcuLi9oZWxwZXJzL2NvbXBhdCc7XHJcbmltcG9ydCB7V2ViU3RvcmFnZX0gZnJvbSAnLi4vY29yZS9pbnRlcmZhY2VzL3dlYlN0b3JhZ2UnO1xyXG5cclxuZXhwb3J0IGFic3RyYWN0IGNsYXNzIEJhc2VTeW5jU3RvcmFnZVN0cmF0ZWd5IGltcGxlbWVudHMgU3RvcmFnZVN0cmF0ZWd5PGFueT4ge1xyXG5cdHJlYWRvbmx5IGtleUNoYW5nZXM6IFN1YmplY3Q8c3RyaW5nPiA9IG5ldyBTdWJqZWN0KCk7XHJcblx0XHJcblx0Y29uc3RydWN0b3IocHJvdGVjdGVkIHN0b3JhZ2U6IFdlYlN0b3JhZ2UsIHByb3RlY3RlZCBjYWNoZTogU3RyYXRlZ3lDYWNoZVNlcnZpY2UpIHt9XHJcblx0XHJcblx0cHJvdGVjdGVkIF9pc0F2YWlsYWJsZTogYm9vbGVhbjtcclxuXHRcclxuXHRnZXQgaXNBdmFpbGFibGUoKTogYm9vbGVhbiB7XHJcblx0XHRpZiAodGhpcy5faXNBdmFpbGFibGUgPT09IHVuZGVmaW5lZCkgdGhpcy5faXNBdmFpbGFibGUgPSBDb21wYXRIZWxwZXIuaXNTdG9yYWdlQXZhaWxhYmxlKHRoaXMuc3RvcmFnZSk7XHJcblx0XHRyZXR1cm4gdGhpcy5faXNBdmFpbGFibGU7XHJcblx0fVxyXG5cdFxyXG5cdGFic3RyYWN0IHJlYWRvbmx5IG5hbWU6IHN0cmluZztcclxuXHRcclxuXHRnZXQoa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPGFueT4ge1xyXG5cdFx0bGV0IGRhdGE6IGFueSA9IHRoaXMuY2FjaGUuZ2V0KHRoaXMubmFtZSwga2V5KTtcclxuXHRcdGlmIChkYXRhICE9PSB1bmRlZmluZWQpIHJldHVybiBvZihkYXRhKTtcclxuXHRcdFxyXG5cdFx0dHJ5IHtcclxuXHRcdFx0Y29uc3QgaXRlbTogYW55ID0gdGhpcy5zdG9yYWdlLmdldEl0ZW0oa2V5KTtcclxuXHRcdFx0aWYgKGl0ZW0gIT09IG51bGwpIHtcclxuXHRcdFx0XHRkYXRhID0gSlNPTi5wYXJzZShpdGVtKTtcclxuXHRcdFx0XHR0aGlzLmNhY2hlLnNldCh0aGlzLm5hbWUsIGtleSwgZGF0YSk7XHJcblx0XHRcdH1cclxuXHRcdH0gY2F0Y2goZXJyKSB7XHJcblx0XHRcdGNvbnNvbGUud2FybihlcnIpO1xyXG5cdFx0fVxyXG5cdFx0XHJcblx0XHRyZXR1cm4gb2YoZGF0YSk7XHJcblx0fVxyXG5cdFxyXG5cdHNldChrZXk6IHN0cmluZywgdmFsdWU6IGFueSk6IE9ic2VydmFibGU8YW55PiB7XHJcblx0XHRjb25zdCBkYXRhOiBzdHJpbmcgPSBKU09OLnN0cmluZ2lmeSh2YWx1ZSk7XHJcblx0XHR0aGlzLnN0b3JhZ2Uuc2V0SXRlbShrZXksIGRhdGEpO1xyXG5cdFx0dGhpcy5jYWNoZS5zZXQodGhpcy5uYW1lLCBrZXksIHZhbHVlKTtcclxuXHRcdHRoaXMua2V5Q2hhbmdlcy5uZXh0KGtleSk7XHJcblx0XHRyZXR1cm4gb2YodmFsdWUpO1xyXG5cdH1cclxuXHRcclxuXHRkZWwoa2V5OiBzdHJpbmcpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuXHRcdHRoaXMuc3RvcmFnZS5yZW1vdmVJdGVtKGtleSk7XHJcblx0XHR0aGlzLmNhY2hlLmRlbCh0aGlzLm5hbWUsIGtleSk7XHJcblx0XHR0aGlzLmtleUNoYW5nZXMubmV4dChrZXkpO1xyXG5cdFx0cmV0dXJuIG9mKG51bGwpO1xyXG5cdH1cclxuXHRcclxuXHRjbGVhcigpOiBPYnNlcnZhYmxlPHZvaWQ+IHtcclxuXHRcdHRoaXMuc3RvcmFnZS5jbGVhcigpO1xyXG5cdFx0dGhpcy5jYWNoZS5jbGVhcih0aGlzLm5hbWUpO1xyXG5cdFx0dGhpcy5rZXlDaGFuZ2VzLm5leHQobnVsbCk7XHJcblx0XHRyZXR1cm4gb2YobnVsbCk7XHJcblx0fVxyXG5cdFxyXG59XHJcbiJdfQ==