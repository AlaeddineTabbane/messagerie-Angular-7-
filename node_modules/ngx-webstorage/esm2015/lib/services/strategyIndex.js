/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Subject } from 'rxjs';
import { Inject, Injectable, Optional } from '@angular/core';
import { STORAGE_STRATEGIES } from '../strategies';
import { StorageStrategies } from '../constants/strategy';
import * as i0 from "@angular/core";
import * as i1 from "../strategies/index";
/** @type {?} */
export const InvalidStrategyError = 'invalid_strategy';
export class StrategyIndex {
    /**
     * @param {?} strategies
     */
    constructor(strategies) {
        this.strategies = strategies;
        this.registration$ = new Subject();
        if (!strategies)
            strategies = [];
        this.strategies = strategies.reverse()
            .map((strategy, index, arr) => strategy.name)
            .map((name, index, arr) => arr.indexOf(name) === index ? index : null)
            .filter((index) => index !== null)
            .map((index) => strategies[index]);
    }
    /**
     * @param {?} name
     * @return {?}
     */
    static get(name) {
        if (!this.isStrategyRegistered(name))
            throw Error(InvalidStrategyError);
        /** @type {?} */
        let strategy = StrategyIndex.index[name];
        if (!strategy.isAvailable) {
            strategy = StrategyIndex.index[StorageStrategies.InMemory];
        }
        return strategy;
    }
    /**
     * @param {?} name
     * @param {?} strategy
     * @return {?}
     */
    static set(name, strategy) {
        StrategyIndex.index[name] = strategy;
    }
    /**
     * @param {?=} name
     * @return {?}
     */
    static clear(name) {
        if (name !== undefined)
            delete StrategyIndex.index[name];
        else
            StrategyIndex.index = {};
    }
    /**
     * @param {?} name
     * @return {?}
     */
    static isStrategyRegistered(name) {
        return name in StrategyIndex.index;
    }
    /**
     * @return {?}
     */
    static hasRegistredStrategies() {
        return Object.keys(StrategyIndex.index).length > 0;
    }
    /**
     * @param {?} name
     * @return {?}
     */
    getStrategy(name) {
        return StrategyIndex.get(name);
    }
    /**
     * @return {?}
     */
    indexStrategies() {
        this.strategies.forEach((strategy) => this.register(strategy.name, strategy));
    }
    /**
     * @param {?} name
     * @param {?=} overrideIfExists
     * @return {?}
     */
    indexStrategy(name, overrideIfExists = false) {
        if (StrategyIndex.isStrategyRegistered(name) && !overrideIfExists)
            return StrategyIndex.get(name);
        /** @type {?} */
        const strategy = this.strategies.find((strategy) => strategy.name === name);
        if (!strategy)
            throw new Error(InvalidStrategyError);
        this.register(name, strategy, overrideIfExists);
        return strategy;
    }
    /**
     * @param {?} name
     * @param {?} strategy
     * @param {?=} overrideIfExists
     * @return {?}
     */
    register(name, strategy, overrideIfExists = false) {
        if (!StrategyIndex.isStrategyRegistered(name) || overrideIfExists) {
            StrategyIndex.set(name, strategy);
            this.registration$.next(name);
        }
    }
}
StrategyIndex.index = {};
StrategyIndex.decorators = [
    { type: Injectable, args: [{ providedIn: 'root' },] }
];
/** @nocollapse */
StrategyIndex.ctorParameters = () => [
    { type: Array, decorators: [{ type: Optional }, { type: Inject, args: [STORAGE_STRATEGIES,] }] }
];
/** @nocollapse */ StrategyIndex.ngInjectableDef = i0.defineInjectable({ factory: function StrategyIndex_Factory() { return new StrategyIndex(i0.inject(i1.STORAGE_STRATEGIES, 8)); }, token: StrategyIndex, providedIn: "root" });
if (false) {
    /** @type {?} */
    StrategyIndex.index;
    /** @type {?} */
    StrategyIndex.prototype.registration$;
    /** @type {?} */
    StrategyIndex.prototype.strategies;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3RyYXRlZ3lJbmRleC5qcyIsInNvdXJjZVJvb3QiOiJuZzovL25neC13ZWJzdG9yYWdlLyIsInNvdXJjZXMiOlsibGliL3NlcnZpY2VzL3N0cmF0ZWd5SW5kZXgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7OztBQUNBLE9BQU8sRUFBQyxPQUFPLEVBQUMsTUFBTSxNQUFNLENBQUM7QUFDN0IsT0FBTyxFQUFDLE1BQU0sRUFBRSxVQUFVLEVBQUUsUUFBUSxFQUFDLE1BQU0sZUFBZSxDQUFDO0FBQzNELE9BQU8sRUFBQyxrQkFBa0IsRUFBQyxNQUFNLGVBQWUsQ0FBQztBQUNqRCxPQUFPLEVBQUMsaUJBQWlCLEVBQUMsTUFBTSx1QkFBdUIsQ0FBQzs7OztBQUV4RCxNQUFNLE9BQU8sb0JBQW9CLEdBQUcsa0JBQWtCO0FBR3RELE1BQU0sT0FBTyxhQUFhOzs7O0lBS3pCLFlBQThELFVBQWtDO1FBQWxDLGVBQVUsR0FBVixVQUFVLENBQXdCO1FBRnZGLGtCQUFhLEdBQW9CLElBQUksT0FBTyxFQUFFLENBQUM7UUFHdkQsSUFBSSxDQUFDLFVBQVU7WUFBRSxVQUFVLEdBQUcsRUFBRSxDQUFDO1FBQ2pDLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRTthQUNwQyxHQUFHLENBQUMsQ0FBQyxRQUE4QixFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUM7YUFDbEUsR0FBRyxDQUFDLENBQUMsSUFBWSxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLEtBQUssS0FBSyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQzthQUM3RSxNQUFNLENBQUMsQ0FBQyxLQUFhLEVBQUUsRUFBRSxDQUFDLEtBQUssS0FBSyxJQUFJLENBQUM7YUFDekMsR0FBRyxDQUFDLENBQUMsS0FBYSxFQUFFLEVBQUUsQ0FB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QTREOztJQUM1RCxzQ0FBd0Q7O0lBRTVDLG1DQUFvRiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RvcmFnZVN0cmF0ZWd5fSBmcm9tICcuLi9jb3JlL2ludGVyZmFjZXMvc3RvcmFnZVN0cmF0ZWd5JztcclxuaW1wb3J0IHtTdWJqZWN0fSBmcm9tICdyeGpzJztcclxuaW1wb3J0IHtJbmplY3QsIEluamVjdGFibGUsIE9wdGlvbmFsfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHtTVE9SQUdFX1NUUkFURUdJRVN9IGZyb20gJy4uL3N0cmF0ZWdpZXMnO1xyXG5pbXBvcnQge1N0b3JhZ2VTdHJhdGVnaWVzfSBmcm9tICcuLi9jb25zdGFudHMvc3RyYXRlZ3knO1xyXG5cclxuZXhwb3J0IGNvbnN0IEludmFsaWRTdHJhdGVneUVycm9yID0gJ2ludmFsaWRfc3RyYXRlZ3knO1xyXG5cclxuQEluamVjdGFibGUoe3Byb3ZpZGVkSW46ICdyb290J30pXHJcbmV4cG9ydCBjbGFzcyBTdHJhdGVneUluZGV4IHtcclxuXHJcblx0c3RhdGljIGluZGV4OiB7IFtuYW1lOiBzdHJpbmddOiBTdG9yYWdlU3RyYXRlZ3k8YW55PiB9ID0ge307XHJcblx0cmVhZG9ubHkgcmVnaXN0cmF0aW9uJDogU3ViamVjdDxzdHJpbmc+ID0gbmV3IFN1YmplY3QoKTtcclxuXHJcblx0Y29uc3RydWN0b3IoQE9wdGlvbmFsKCkgQEluamVjdChTVE9SQUdFX1NUUkFURUdJRVMpIHByb3RlY3RlZCBzdHJhdGVnaWVzOiBTdG9yYWdlU3RyYXRlZ3k8YW55PltdKSB7XHJcblx0XHRpZiAoIXN0cmF0ZWdpZXMpIHN0cmF0ZWdpZXMgPSBbXTtcclxuXHRcdHRoaXMuc3RyYXRlZ2llcyA9IHN0cmF0ZWdpZXMucmV2ZXJzZSgpXHJcblx0XHRcdC5tYXAoKHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55PiwgaW5kZXgsIGFycikgPT4gc3RyYXRlZ3kubmFtZSlcclxuXHRcdFx0Lm1hcCgobmFtZTogc3RyaW5nLCBpbmRleCwgYXJyKSA9PiBhcnIuaW5kZXhPZihuYW1lKSA9PT0gaW5kZXggPyBpbmRleCA6IG51bGwpXHJcblx0XHRcdC5maWx0ZXIoKGluZGV4OiBudW1iZXIpID0+IGluZGV4ICE9PSBudWxsKVxyXG5cdFx0XHQubWFwKChpbmRleDogbnVtYmVyKSA9PiBzdHJhdGVnaWVzW2luZGV4XSk7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgZ2V0KG5hbWU6IHN0cmluZyk6IFN0b3JhZ2VTdHJhdGVneTxhbnk+IHtcclxuXHRcdGlmICghdGhpcy5pc1N0cmF0ZWd5UmVnaXN0ZXJlZChuYW1lKSkgdGhyb3cgRXJyb3IoSW52YWxpZFN0cmF0ZWd5RXJyb3IpO1xyXG5cdFx0bGV0IHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55PiA9IFN0cmF0ZWd5SW5kZXguaW5kZXhbbmFtZV07XHJcblx0XHRpZiAoIXN0cmF0ZWd5LmlzQXZhaWxhYmxlKSB7XHJcblx0XHRcdHN0cmF0ZWd5ID0gU3RyYXRlZ3lJbmRleC5pbmRleFtTdG9yYWdlU3RyYXRlZ2llcy5Jbk1lbW9yeV07XHJcblx0XHR9XHJcblx0XHRyZXR1cm4gc3RyYXRlZ3k7XHJcblx0fVxyXG5cclxuXHRzdGF0aWMgc2V0KG5hbWU6IHN0cmluZywgc3RyYXRlZ3kpOiB2b2lkIHtcclxuXHRcdFN0cmF0ZWd5SW5kZXguaW5kZXhbbmFtZV0gPSBzdHJhdGVneTtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBjbGVhcihuYW1lPzogc3RyaW5nKTogdm9pZCB7XHJcblx0XHRpZiAobmFtZSAhPT0gdW5kZWZpbmVkKSBkZWxldGUgU3RyYXRlZ3lJbmRleC5pbmRleFtuYW1lXTtcclxuXHRcdGVsc2UgU3RyYXRlZ3lJbmRleC5pbmRleCA9IHt9O1xyXG5cdH1cclxuXHJcblx0c3RhdGljIGlzU3RyYXRlZ3lSZWdpc3RlcmVkKG5hbWU6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIG5hbWUgaW4gU3RyYXRlZ3lJbmRleC5pbmRleDtcclxuXHR9XHJcblxyXG5cdHN0YXRpYyBoYXNSZWdpc3RyZWRTdHJhdGVnaWVzKCk6IGJvb2xlYW4ge1xyXG5cdFx0cmV0dXJuIE9iamVjdC5rZXlzKFN0cmF0ZWd5SW5kZXguaW5kZXgpLmxlbmd0aCA+IDA7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgZ2V0U3RyYXRlZ3kobmFtZTogc3RyaW5nKTogU3RvcmFnZVN0cmF0ZWd5PGFueT4ge1xyXG5cdFx0cmV0dXJuIFN0cmF0ZWd5SW5kZXguZ2V0KG5hbWUpO1xyXG5cdH1cclxuXHJcblx0cHVibGljIGluZGV4U3RyYXRlZ2llcygpIHtcclxuXHRcdHRoaXMuc3RyYXRlZ2llcy5mb3JFYWNoKChzdHJhdGVneTogU3RvcmFnZVN0cmF0ZWd5PGFueT4pID0+IHRoaXMucmVnaXN0ZXIoc3RyYXRlZ3kubmFtZSwgc3RyYXRlZ3kpKTtcclxuXHR9XHJcblxyXG5cdHB1YmxpYyBpbmRleFN0cmF0ZWd5KG5hbWU6IHN0cmluZywgb3ZlcnJpZGVJZkV4aXN0czogYm9vbGVhbiA9IGZhbHNlKTogU3RvcmFnZVN0cmF0ZWd5PGFueT4ge1xyXG5cdFx0aWYgKFN0cmF0ZWd5SW5kZXguaXNTdHJhdGVneVJlZ2lzdGVyZWQobmFtZSkgJiYgIW92ZXJyaWRlSWZFeGlzdHMpIHJldHVybiBTdHJhdGVneUluZGV4LmdldChuYW1lKTtcclxuXHRcdGNvbnN0IHN0cmF0ZWd5OiBTdG9yYWdlU3RyYXRlZ3k8YW55PiA9IHRoaXMuc3RyYXRlZ2llcy5maW5kKChzdHJhdGVneTogU3RvcmFnZVN0cmF0ZWd5PGFueT4pID0+IHN0cmF0ZWd5Lm5hbWUgPT09IG5hbWUpO1xyXG5cdFx0aWYgKCFzdHJhdGVneSkgdGhyb3cgbmV3IEVycm9yKEludmFsaWRTdHJhdGVneUVycm9yKTtcclxuXHRcdHRoaXMucmVnaXN0ZXIobmFtZSwgc3RyYXRlZ3ksIG92ZXJyaWRlSWZFeGlzdHMpO1xyXG5cdFx0cmV0dXJuIHN0cmF0ZWd5O1xyXG5cdH1cclxuXHJcblx0cHVibGljIHJlZ2lzdGVyKG5hbWU6IHN0cmluZywgc3RyYXRlZ3k6IFN0b3JhZ2VTdHJhdGVneTxhbnk+LCBvdmVycmlkZUlmRXhpc3RzOiBib29sZWFuID0gZmFsc2UpIHtcclxuXHRcdGlmICghU3RyYXRlZ3lJbmRleC5pc1N0cmF0ZWd5UmVnaXN0ZXJlZChuYW1lKSB8fCBvdmVycmlkZUlmRXhpc3RzKSB7XHJcblx0XHRcdFN0cmF0ZWd5SW5kZXguc2V0KG5hbWUsIHN0cmF0ZWd5KTtcclxuXHRcdFx0dGhpcy5yZWdpc3RyYXRpb24kLm5leHQobmFtZSk7XHJcblx0XHR9XHJcblx0fVxyXG5cclxufVxyXG5cclxuIl19