/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { noop } from '../../helpers/noop';
import { StorageKeyManager } from '../../helpers/storageKeyManager';
import { distinctUntilChanged, filter, shareReplay, switchMap } from 'rxjs/operators';
var SyncStorage = /** @class */ (function () {
    function SyncStorage(strategy) {
        this.strategy = strategy;
    }
    /**
     * @param {?} key
     * @return {?}
     */
    SyncStorage.prototype.retrieve = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        /** @type {?} */
        var value;
        this.strategy.get(StorageKeyManager.normalize(key)).subscribe(function (result) { return value = typeof result === 'undefined' ? null : result; });
        return value;
    };
    /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    SyncStorage.prototype.store = /**
     * @param {?} key
     * @param {?} value
     * @return {?}
     */
    function (key, value) {
        this.strategy.set(StorageKeyManager.normalize(key), value).subscribe(noop);
        return value;
    };
    /**
     * @param {?=} key
     * @return {?}
     */
    SyncStorage.prototype.clear = /**
     * @param {?=} key
     * @return {?}
     */
    function (key) {
        if (key !== undefined)
            this.strategy.del(StorageKeyManager.normalize(key)).subscribe(noop);
        else
            this.strategy.clear().subscribe(noop);
    };
    /**
     * @return {?}
     */
    SyncStorage.prototype.getStrategyName = /**
     * @return {?}
     */
    function () { return this.strategy.name; };
    /**
     * @param {?} key
     * @return {?}
     */
    SyncStorage.prototype.observe = /**
     * @param {?} key
     * @return {?}
     */
    function (key) {
        var _this = this;
        key = StorageKeyManager.normalize(key);
        return this.strategy.keyChanges.pipe(filter(function (changed) { return changed === null || changed === key; }), switchMap(function () { return _this.strategy.get(key); }), distinctUntilChanged(), shareReplay());
    };
    return SyncStorage;
}());
export { SyncStorage };
if (false) {
    /** @type {?} */
    SyncStorage.prototype.strategy;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3luY1N0b3JhZ2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtd2Vic3RvcmFnZS8iLCJzb3VyY2VzIjpbImxpYi9jb3JlL3RlbXBsYXRlcy9zeW5jU3RvcmFnZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQ0EsT0FBTyxFQUFDLElBQUksRUFBQyxNQUFNLG9CQUFvQixDQUFDO0FBRXhDLE9BQU8sRUFBQyxpQkFBaUIsRUFBQyxNQUFNLGlDQUFpQyxDQUFDO0FBRWxFLE9BQU8sRUFBQyxvQkFBb0IsRUFBRSxNQUFNLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBQyxNQUFNLGdCQUFnQixDQUFDO0FBRXBGO0lBQ0MscUJBQXNCLFFBQThCO1FBQTlCLGFBQVEsR0FBUixRQUFRLENBQXNCO0lBQ3BELENBQUM7Ozs7O0lBRUQsOEJBQVE7Ozs7SUFBUixVQUFTLEdBQVc7O1lBQ2YsS0FBVTtRQUNkLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxVQUFDLE1BQU0sSUFBSyxPQUFBLEtBQUssR0FBRyxPQUFPLE1BQU0sS0FBSyxXQUFXLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsTUFBTSxFQUFyRCxDQUFxRCxDQUFDLENBQUM7UUFDakksT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDOzs7Ozs7SUFFRCwyQkFBSzs7Ozs7SUFBTCxVQUFNLEdBQVcsRUFBRSxLQUFVO1FBQzVCLElBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLGlCQUFpQixDQUFDLFNBQVMsQ0FBQyxHQUFHLENBQUMsRUFBRSxLQUFLLENBQUMsQ0FBQyxTQUFTLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDM0UsT0FBTyxLQUFLLENBQUM7SUFDZCxDQUFDOzs7OztJQUVELDJCQUFLOzs7O0lBQUwsVUFBTSxHQUFZO1FBQ2pCLElBQUksR0FBRyxLQUFLLFNBQVM7WUFDcEIsSUFBSSxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsaUJBQWlCLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLElBQUksQ0FBQyxDQUFDOztZQUNoRSxJQUFJLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM1QyxDQUFDOzs7O0lBRUQscUNBQWU7OztJQUFmLGNBQTJCLE9BQU8sSUFBSSxDQUFDLFFBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDOzs7OztJQUV2RCw2QkFBTzs7OztJQUFQLFVBQVEsR0FBVztRQUFuQixpQkFRQztRQVBBLEdBQUcsR0FBRyxpQkFBaUIsQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLENBQUM7UUFDdkMsT0FBTyxJQUFJLENBQUMsUUFBUSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQ25DLE1BQU0sQ0FBQyxVQUFDLE9BQWUsSUFBSyxPQUFBLE9BQU8sS0FBSyxJQUFJLElBQUksT0FBTyxLQUFLLEdBQUcsRUFBbkMsQ0FBbUMsQ0FBQyxFQUNoRSxTQUFTLENBQUMsY0FBTSxPQUFBLEtBQUksQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLEdBQUcsQ0FBQyxFQUF0QixDQUFzQixDQUFDLEVBQ3ZDLG9CQUFvQixFQUFFLEVBQ3RCLFdBQVcsRUFBRSxDQUNiLENBQUM7SUFDSCxDQUFDO0lBRUYsa0JBQUM7QUFBRCxDQUFDLEFBakNELElBaUNDOzs7O0lBaENZLCtCQUF3QyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7U3RvcmFnZVN0cmF0ZWd5fSBmcm9tICcuLi9pbnRlcmZhY2VzL3N0b3JhZ2VTdHJhdGVneSc7XHJcbmltcG9ydCB7bm9vcH0gZnJvbSAnLi4vLi4vaGVscGVycy9ub29wJztcclxuaW1wb3J0IHtTdG9yYWdlU2VydmljZX0gZnJvbSAnLi4vaW50ZXJmYWNlcy9zdG9yYWdlU2VydmljZSc7XHJcbmltcG9ydCB7U3RvcmFnZUtleU1hbmFnZXJ9IGZyb20gJy4uLy4uL2hlbHBlcnMvc3RvcmFnZUtleU1hbmFnZXInO1xyXG5pbXBvcnQge09ic2VydmFibGV9IGZyb20gJ3J4anMnO1xyXG5pbXBvcnQge2Rpc3RpbmN0VW50aWxDaGFuZ2VkLCBmaWx0ZXIsIHNoYXJlUmVwbGF5LCBzd2l0Y2hNYXB9IGZyb20gJ3J4anMvb3BlcmF0b3JzJztcclxuXHJcbmV4cG9ydCBjbGFzcyBTeW5jU3RvcmFnZSBpbXBsZW1lbnRzIFN0b3JhZ2VTZXJ2aWNlIHtcclxuXHRjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgc3RyYXRlZ3k6IFN0b3JhZ2VTdHJhdGVneTxhbnk+KSB7XHJcblx0fVxyXG5cclxuXHRyZXRyaWV2ZShrZXk6IHN0cmluZyk6IGFueSB7XHJcblx0XHRsZXQgdmFsdWU6IGFueTtcclxuXHRcdHRoaXMuc3RyYXRlZ3kuZ2V0KFN0b3JhZ2VLZXlNYW5hZ2VyLm5vcm1hbGl6ZShrZXkpKS5zdWJzY3JpYmUoKHJlc3VsdCkgPT4gdmFsdWUgPSB0eXBlb2YgcmVzdWx0ID09PSAndW5kZWZpbmVkJyA/IG51bGwgOiByZXN1bHQpO1xyXG5cdFx0cmV0dXJuIHZhbHVlO1xyXG5cdH1cclxuXHJcblx0c3RvcmUoa2V5OiBzdHJpbmcsIHZhbHVlOiBhbnkpOiBhbnkge1xyXG5cdFx0dGhpcy5zdHJhdGVneS5zZXQoU3RvcmFnZUtleU1hbmFnZXIubm9ybWFsaXplKGtleSksIHZhbHVlKS5zdWJzY3JpYmUobm9vcCk7XHJcblx0XHRyZXR1cm4gdmFsdWU7XHJcblx0fVxyXG5cclxuXHRjbGVhcihrZXk/OiBzdHJpbmcpOiB2b2lkIHtcclxuXHRcdGlmIChrZXkgIT09IHVuZGVmaW5lZClcclxuXHRcdFx0dGhpcy5zdHJhdGVneS5kZWwoU3RvcmFnZUtleU1hbmFnZXIubm9ybWFsaXplKGtleSkpLnN1YnNjcmliZShub29wKTtcclxuXHRcdGVsc2UgdGhpcy5zdHJhdGVneS5jbGVhcigpLnN1YnNjcmliZShub29wKTtcclxuXHR9XHJcblxyXG5cdGdldFN0cmF0ZWd5TmFtZSgpOiBzdHJpbmcge3JldHVybiB0aGlzLnN0cmF0ZWd5Lm5hbWU7IH1cclxuXHJcblx0b2JzZXJ2ZShrZXk6IHN0cmluZyk6IE9ic2VydmFibGU8YW55PiB7XHJcblx0XHRrZXkgPSBTdG9yYWdlS2V5TWFuYWdlci5ub3JtYWxpemUoa2V5KTtcclxuXHRcdHJldHVybiB0aGlzLnN0cmF0ZWd5LmtleUNoYW5nZXMucGlwZShcclxuXHRcdFx0ZmlsdGVyKChjaGFuZ2VkOiBzdHJpbmcpID0+IGNoYW5nZWQgPT09IG51bGwgfHwgY2hhbmdlZCA9PT0ga2V5KSxcclxuXHRcdFx0c3dpdGNoTWFwKCgpID0+IHRoaXMuc3RyYXRlZ3kuZ2V0KGtleSkpLFxyXG5cdFx0XHRkaXN0aW5jdFVudGlsQ2hhbmdlZCgpLFxyXG5cdFx0XHRzaGFyZVJlcGxheSgpXHJcblx0XHQpO1xyXG5cdH1cclxuXHJcbn1cclxuIl19